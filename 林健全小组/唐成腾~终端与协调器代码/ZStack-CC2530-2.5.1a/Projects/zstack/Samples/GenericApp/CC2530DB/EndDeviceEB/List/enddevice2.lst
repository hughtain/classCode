###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         16/Jul/2016  21:36:17 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zi #
#                          gbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp _IR\Source\enddevice2.c            #
#    Command line       =  -f "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7. #
#                          9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack #
#                          \Samples\GenericApp _IR\CC2530DB\..\..\..\Tools\CC #
#                          2530DB\f8wEndev.cfg" (-DCPU32MHZ                   #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0         #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1314                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥ #
#                          \700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                       #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\Source\enddevice2.c" -D             #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D xPOWER_SAVING -lC "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\7 #
#                          00ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                         #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\EndDeviceEB\List\" -lA     #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\EndDeviceEB\List\"   #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\EndDeviceEB\Obj\"    #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ #
#                          ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                      #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\" -I                       #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\Source\" -I       #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\ZMain\TI253 #
#                          0DB\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢ #
#                          Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\ #
#                          zstack\Samples\GenericApp                          #
#                          _IR\CC2530DB\..\..\..\..\..\Components\hal\include #
#                          \" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼ #
#                          þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Samples\GenericApp _IR\CC2530DB\..\..\..\..\.. #
#                          \Components\hal\target\CC2530EB\" -I               #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\include\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥ #
#                          \700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                       #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\high_level\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\70 #
#                          0ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                          #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\" -I                           #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\low_level\srf04\single_chip\" -I         #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mt\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBe #
#                          e¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\GenericApp                     #
#                          _IR\CC2530DB\..\..\..\..\..\Components\osal\includ #
#                          e\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì× #
#                          ¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zs #
#                          tack\Samples\GenericApp _IR\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\" -I                   #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\services\sdata\" -I                          #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\af\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\70 #
#                          0ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                          #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\nwk\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigB #
#                          ee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Samples\GenericApp                    #
#                          _IR\CC2530DB\..\..\..\..\..\Components\stack\sapi\ #
#                          " -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ #
#                          7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zsta #
#                          ck\Samples\GenericApp _IR\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sec\" -I                          #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sys\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\7 #
#                          00ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                         #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\zdo\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigB #
#                          ee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Samples\GenericApp                    #
#                          _IR\CC2530DB\..\..\..\..\..\Components\zmac\" -I   #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\zmac\f8w\" -Ohz --require_prototypes         #
#    List file          =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zi #
#                          gbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp _IR\CC2530DB\EndDeviceEB\List\endd #
#                          evice2.lst                                         #
#    Object file        =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zi #
#                          gbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp _IR\CC2530DB\EndDeviceEB\Obj\endde #
#                          vice2.r51                                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp _IR\Source\enddevice2.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          #if !defined( WIN32 )
     72            #include "OnBoard.h"
     73          #endif
     74          
     75          /* HAL */
     76          #include "hal_lcd.h"
     77          #include "hal_led.h"
     78          #include "hal_key.h"
     79          #include "hal_uart.h"
     80          #include "BH1750.h"
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif  
     85          uint16 myApp_ReadlightLevel(void);
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          
     90          /*********************************************************************
     91           * CONSTANTS
     92           */
     93          
     94          /*********************************************************************
     95           * TYPEDEFS
     96           */
     97          
     98          /*********************************************************************
     99           * GLOBAL VARIABLES
    100           */
    101          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    102          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
    103          {
    104            GENERICAPP_CLUSTERID
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW GenericApp_ClusterList
    108          {
    109            GENERICAPP_ENDPOINT,              //  int Endpoint;
    110            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    111            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    112            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    113            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    114            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    115            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    116            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    117            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    118          };
    119          
    120          // This is the Endpoint/Interface description.  It is defined here, but
    121          // filled-in in GenericApp_Init().  Another way to go would be to fill
    122          // in the structure here and make it a "const" (in code space).  The
    123          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    125          
    126          /*********************************************************************
    127           * EXTERNAL VARIABLES
    128           */
    129          
    130          /*********************************************************************
    131           * EXTERNAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138                                    // This variable will be received when
    139                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          byte sensorID = '1';
   \                     sensorID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for sensorID>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    153          static void GenericApp_HandleKeys( byte shift, byte keys );
    154          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    155          static void GenericApp_SendTheMessage( void );
    156          
    157          
    158          uint16 myApp_ReadLightLevel( void );
    159          
    160          #if defined( IAR_ARMCM3_LM )
    161          static void GenericApp_ProcessRtosMessage( void );
    162          #endif
    163          
    164          /*********************************************************************
    165           * NETWORK LAYER CALLBACKS
    166           */
    167          
    168          /*********************************************************************
    169           * PUBLIC FUNCTIONS
    170           */
    171          
    172          /*********************************************************************
    173           * @fn      GenericApp_Init
    174           *
    175           * @brief   Initialization function for the Generic App Task.
    176           *          This is called during initialization and should contain
    177           *          any application specific initialization (ie. hardware
    178           *          initialization/setup, table initialization, power up
    179           *          notificaiton ... ).
    180           *
    181           * @param   task_id - the ID assigned by OSAL.  This ID should be
    182           *                    used to send messages and set timers.
    183           *
    184           * @return  none
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    187          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    188            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    189            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    190            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    191          
    192            // Device hardware initialization can be added here or in main() (Zmain.c).
    193            // If the hardware is application specific - add it here.
    194            // If the hardware is other parts of the device add it in main().
    195          
    196            GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000015   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
    197            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   740A         MOV     A,#0xa
   \   00001E   F0           MOVX    @DPTR,A
    198            GenericApp_DstAddr.addr.shortAddr = 0x0000;
   \   00001F   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    199          
    200            // Fill out the endpoint description.
    201            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000026   90....       MOV     DPTR,#GenericApp_epDesc
   \   000029   740A         MOV     A,#0xa
   \   00002B   F0           MOVX    @DPTR,A
    202            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    203            GenericApp_epDesc.simpleDesc
    204                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    205            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    206          
    207            // Register the endpoint description with the AF
    208            afRegister( &GenericApp_epDesc );
   \   00003F                ; Setup parameters for call to function afRegister
   \   00003F   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000041   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000043   12....       LCALL   ??afRegister?relay
    209          
    210            // Register for all key events - This app will handle all key events
    211            RegisterForKeys( GenericApp_TaskID );
   \   000046                ; Setup parameters for call to function RegisterForKeys
   \   000046   90....       MOV     DPTR,#GenericApp_TaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??RegisterForKeys?relay
    212          
    213            // Update the display
    214          #if defined ( LCD_SUPPORTED )
    215            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00004E                ; Setup parameters for call to function HalLcdWriteString
   \   00004E   7901         MOV     R1,#0x1
   \   000050   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000052   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000054   12....       LCALL   ??HalLcdWriteString?relay
    216          #endif
    217          
    218            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A20         MOV     R2,#0x20
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    219            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000063                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000063   7A06         MOV     R2,#0x6
   \   000065   7B80         MOV     R3,#-0x80
   \   000067   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    220          
    221          #if defined( IAR_ARMCM3_LM )
    222            // Register this task with RTOS task initiator
    223            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    224          #endif
    225          }
   \   00006F   7F01         MOV     R7,#0x1
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
    226          
    227          /*********************************************************************
    228           * @fn      GenericApp_ProcessEvent
    229           *
    230           * @brief   Generic Application Task event processor.  This function
    231           *          is called to process all events for the task.  Events
    232           *          include timers, messages and any other user defined events.
    233           *
    234           * @param   task_id  - The OSAL assigned task ID.
    235           * @param   events - events to process.  This is a bit map and can
    236           *                   contain more than one event.
    237           *
    238           * @return  none
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    241          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    242            afIncomingMSGPacket_t *MSGpkt;
    243            afDataConfirm_t *afDataConfirm;
    244          
    245            // Data Confirmation message fields
    246            byte sentEP;
    247            ZStatus_t sentStatus;
    248            byte sentTransID;       // This should match the value sent
    249            (void)task_id;  // Intentionally unreferenced parameter
    250          
    251            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    252            {
    253              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   802B         SJMP    ??GenericApp_ProcessEvent_1
    254              while ( MSGpkt )
    255              {
    256                switch ( MSGpkt->hdr.event )
    257                {
    258                  case ZDO_CB_MSG:
    259                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    260                    break;
    261          
    262                  case KEY_CHANGE:
    263                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    264                    break;
    265          
    266                  case AF_DATA_CONFIRM_CMD:
    267                    // This message is received as a confirmation of a data packet sent.
    268                    // The status is of ZStatus_t type [defined in ZComDef.h]
    269                    // The message fields are defined in AF.h
    270                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    271                    sentEP = afDataConfirm->endpoint;
    272                    sentStatus = afDataConfirm->hdr.status;
    273                    sentTransID = afDataConfirm->transID;
    274                    (void)sentEP;
    275                    (void)sentTransID;
    276          
    277                    // Action taken when confirmation is received.
    278                    if ( sentStatus != ZSuccess )
    279                    {
    280                      // The data wasn't delivered -- Do something
    281                    }
    282                    break;
    283          
    284                  case AF_INCOMING_MSG_CMD:
    285                    GenericApp_MessageMSGCB( MSGpkt );
    286                    break;
    287          
    288                  case ZDO_STATE_CHANGE:
    289                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001C   F0           MOVX    @DPTR,A
    290                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    291                        || (GenericApp_NwkState == DEV_ROUTER)
    292                        || (GenericApp_NwkState == DEV_END_DEVICE) )
   \   00001D   6409         XRL     A,#0x9
   \   00001F   600A         JZ      ??GenericApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6407         XRL     A,#0x7
   \   000024   6005         JZ      ??GenericApp_ProcessEvent_3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6406         XRL     A,#0x6
   \   000029   7010         JNZ     ??GenericApp_ProcessEvent_4
    293                    {
    294                      // Start sending "the" message in a regular interval.
    295                      osal_start_timerEx( GenericApp_TaskID,
    296                                          GENERICAPP_SEND_MSG_EVT,
    297                                          GENERICAPP_SEND_MSG_TIMEOUT );
   \                     ??GenericApp_ProcessEvent_3:
   \   00002B                ; Setup parameters for call to function osal_start_timerEx
   \   00002B   7CF4         MOV     R4,#-0xc
   \   00002D   7D01         MOV     R5,#0x1
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#GenericApp_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??osal_start_timerEx?relay
    298                    }
    299                    break;
    300          
    301                  default:
    302                    break;
    303                }
    304          
    305                // Release the memory
    306                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   00003B                ; Setup parameters for call to function osal_msg_deallocate
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   AB..         MOV     R3,?V0 + 1
   \   00003F   12....       LCALL   ??osal_msg_deallocate?relay
    307          
    308                // Next
    309                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000042                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000042   90....       MOV     DPTR,#GenericApp_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??osal_msg_receive?relay
   \   00004A   8A..         MOV     ?V0 + 0,R2
   \   00004C   8B..         MOV     ?V0 + 1,R3
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   45..         ORL     A,?V0 + 1
   \   000052   7003         JNZ     $+5
   \   000054   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   000057   85..82       MOV     DPL,?V0 + 0
   \   00005A   85..83       MOV     DPH,?V0 + 1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   2440         ADD     A,#0x40
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000065   24EF         ADD     A,#-0x11
   \   000067   60AE         JZ      ??GenericApp_ProcessEvent_2
   \   000069   24FE         ADD     A,#-0x2
   \   00006B   70CE         JNZ     ??GenericApp_ProcessEvent_4
   \   00006D   E5..         MOV     A,?V0 + 0
   \   00006F   240C         ADD     A,#0xc
   \   000071   F582         MOV     DPL,A
   \   000073   E5..         MOV     A,?V0 + 1
   \   000075   3400         ADDC    A,#0x0
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V0 + 2,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V0 + 3,A
   \   000080   78..         MOV     R0,#?V0 + 2
   \   000082   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   000085   0000         DW        0
   \   000087   0200         DW        2
   \   000089   0680         DW        32774
   \   00008B   ....         DW        ??GenericApp_ProcessEvent_7
   \   00008D   2080         DW        32800
   \   00008F   ....         DW        ??GenericApp_ProcessEvent_8
   \   000091   ....         DW        ??GenericApp_ProcessEvent_4
   \                     ??GenericApp_ProcessEvent_7:
   \   000093                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000093   AA..         MOV     R2,?V0 + 0
   \   000095   AB..         MOV     R3,?V0 + 1
   \   000097   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00009A   8A..         MOV     ?V0 + 2,R2
   \   00009C   8B..         MOV     ?V0 + 3,R3
   \   00009E   EA           MOV     A,R2
   \   00009F   45..         ORL     A,?V0 + 3
   \   0000A1   6098         JZ      ??GenericApp_ProcessEvent_4
   \   0000A3   8A82         MOV     DPL,R2
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   7032         JNZ     ??GenericApp_ProcessEvent_9
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   602C         JZ      ??GenericApp_ProcessEvent_9
   \   0000B0   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000B3   7402         MOV     A,#0x2
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   8A82         MOV     DPL,R2
   \   0000B8   8B83         MOV     DPH,R3
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000C3   E8           MOV     A,R0
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E9           MOV     A,R1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5                ; Setup parameters for call to function HalLedSet
   \   0000D5   7A01         MOV     R2,#0x1
   \   0000D7   7908         MOV     R1,#0x8
   \   0000D9   12....       LCALL   ??HalLedSet?relay
   \                     ??GenericApp_ProcessEvent_9:
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   AA..         MOV     R2,?V0 + 2
   \   0000DE   AB..         MOV     R3,?V0 + 3
   \   0000E0   12....       LCALL   ??osal_mem_free?relay
   \   0000E3   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_8:
   \   0000E6   E5..         MOV     A,?V0 + 0
   \   0000E8   2413         ADD     A,#0x13
   \   0000EA   F582         MOV     DPL,A
   \   0000EC   E5..         MOV     A,?V0 + 1
   \   0000EE   3400         ADDC    A,#0x0
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   700A         JNZ     ??GenericApp_ProcessEvent_10
   \   0000FD                ; Setup parameters for call to function HalLedSet
   \   0000FD   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_11:
   \   0000FF   7908         MOV     R1,#0x8
   \   000101   12....       LCALL   ??HalLedSet?relay
   \   000104   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_10:
   \   000107                ; Setup parameters for call to function HalLedSet
   \   000107   7A04         MOV     R2,#0x4
   \   000109   80F4         SJMP    ??GenericApp_ProcessEvent_11
   \                     ??GenericApp_ProcessEvent_6:
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F5..         MOV     ?V0 + 4,A
   \   000111   85..82       MOV     DPL,?V0 + 0
   \   000114   85..83       MOV     DPH,?V0 + 1
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   6003         JZ      $+5
   \   00011C   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   00011F   E5..         MOV     A,?V0 + 4
   \   000121   A2E1         MOV     C,0xE0 /* A   */.1
   \   000123   506A         JNC     ??GenericApp_ProcessEvent_12
   \   000125                ; Setup parameters for call to function HalLedSet
   \   000125   7A00         MOV     R2,#0x0
   \   000127   7908         MOV     R1,#0x8
   \   000129   12....       LCALL   ??HalLedSet?relay
   \   00012C   7408         MOV     A,#0x8
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   7402         MOV     A,#0x2
   \   000133   F0           MOVX    @DPTR,A
   \   000134   85..82       MOV     DPL,?XSP + 0
   \   000137   85..83       MOV     DPH,?XSP + 1
   \   00013A   E4           CLR     A
   \   00013B   F0           MOVX    @DPTR,A
   \   00013C   A3           INC     DPTR
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00013E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000141   8A..         MOV     ?V0 + 2,R2
   \   000143   8B..         MOV     ?V0 + 3,R3
   \   000145   AC..         MOV     R4,?V0 + 2
   \   000147   AD..         MOV     R5,?V0 + 3
   \   000149   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   00014C   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   00014F                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00014F   75..00       MOV     ?V0 + 5,#0x0
   \   000152   78..         MOV     R0,#?V0 + 5
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000157   78..         MOV     R0,#?V0 + 2
   \   000159   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015C   75..04       MOV     ?V0 + 5,#0x4
   \   00015F   78..         MOV     R0,#?V0 + 5
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000164   78..         MOV     R0,#?V0 + 2
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000169   75..04       MOV     ?V0 + 2,#0x4
   \   00016C   78..         MOV     R0,#?V0 + 2
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000171   75..0F       MOV     ?V0 + 3,#0xf
   \   000174   78..         MOV     R0,#?V0 + 2
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000179   90....       MOV     DPTR,#GenericApp_epDesc
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   F9           MOV     R1,A
   \   00017E   7409         MOV     A,#0x9
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   AA82         MOV     R2,DPL
   \   000185   AB83         MOV     R3,DPH
   \   000187   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00018A   7409         MOV     A,#0x9
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GenericApp_ProcessEvent_12:
   \   00018F   E5..         MOV     A,?V0 + 4
   \   000191   A2E3         MOV     C,0xE0 /* A   */.3
   \   000193   4003         JC      $+5
   \   000195   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000198                ; Setup parameters for call to function HalLedSet
   \   000198   7A00         MOV     R2,#0x0
   \   00019A   7908         MOV     R1,#0x8
   \   00019C   12....       LCALL   ??HalLedSet?relay
   \   00019F   7408         MOV     A,#0x8
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   740F         MOV     A,#0xf
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   85..82       MOV     DPL,?XSP + 0
   \   0001AA   85..83       MOV     DPH,?XSP + 1
   \   0001AD   74FF         MOV     A,#-0x1
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   0001B5   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001B8                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0001B8   75..00       MOV     ?V0 + 4,#0x0
   \   0001BB   78..         MOV     R0,#?V0 + 4
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C0   78..         MOV     R0,#?V0 + 2
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C5   75..04       MOV     ?V0 + 4,#0x4
   \   0001C8   78..         MOV     R0,#?V0 + 4
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CD   78..         MOV     R0,#?V0 + 2
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   75..04       MOV     ?V0 + 2,#0x4
   \   0001D5   75..0F       MOV     ?V0 + 3,#0xf
   \   0001D8   78..         MOV     R0,#?V0 + 2
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   7904         MOV     R1,#0x4
   \   0001DF   7CFF         MOV     R4,#-0x1
   \   0001E1   7DFF         MOV     R5,#-0x1
   \   0001E3   7408         MOV     A,#0x8
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   AA82         MOV     R2,DPL
   \   0001EA   AB83         MOV     R3,DPH
   \   0001EC   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001EF   7408         MOV     A,#0x8
   \   0001F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F4   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
    310              }
    311          
    312              // return unprocessed events
    313              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_5:
   \   0001F7   EE           MOV     A,R6
   \   0001F8   FA           MOV     R2,A
   \   0001F9   EF           MOV     A,R7
   \   0001FA   6480         XRL     A,#0x80
   \                     ??GenericApp_ProcessEvent_13:
   \   0001FC   FB           MOV     R3,A
   \   0001FD   8023         SJMP    ??GenericApp_ProcessEvent_14
    314            }
    315          
    316            // Send a message out - This event is generated by a timer
    317            //  (setup in GenericApp_Init()).
    318            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   0001FF   EE           MOV     A,R6
   \   000200   A2E0         MOV     C,0xE0 /* A   */.0
   \   000202   501A         JNC     ??GenericApp_ProcessEvent_15
    319            {
    320              // Send "the" message
    321              GenericApp_SendTheMessage();
   \   000204                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000204   12....       LCALL   ??GenericApp_SendTheMessage?relay
    322              // Setup to send message again
    323              osal_start_timerEx( GenericApp_TaskID,
    324                                  GENERICAPP_SEND_MSG_EVT,
    325                                  GENERICAPP_SEND_MSG_TIMEOUT );
   \   000207                ; Setup parameters for call to function osal_start_timerEx
   \   000207   7CF4         MOV     R4,#-0xc
   \   000209   7D01         MOV     R5,#0x1
   \   00020B   7A01         MOV     R2,#0x1
   \   00020D   7B00         MOV     R3,#0x0
   \   00020F   90....       MOV     DPTR,#GenericApp_TaskID
   \   000212   E0           MOVX    A,@DPTR
   \   000213   F9           MOV     R1,A
   \   000214   12....       LCALL   ??osal_start_timerEx?relay
    326          
    327              // return unprocessed events
    328              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   000217   EE           MOV     A,R6
   \   000218   6401         XRL     A,#0x1
   \   00021A   FA           MOV     R2,A
   \   00021B   EF           MOV     A,R7
   \   00021C   80DE         SJMP    ??GenericApp_ProcessEvent_13
    329            }
    330          
    331            
    332          #if defined( IAR_ARMCM3_LM )
    333            // Receive a message from the RTOS queue
    334            if ( events & GENERICAPP_RTOS_MSG_EVT )
    335            {
    336              // Process message from RTOS queue
    337              GenericApp_ProcessRtosMessage();
    338          
    339              // return unprocessed events
    340              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    341            }
    342          #endif
    343          
    344            // Discard unknown events
    345            return 0;
   \                     ??GenericApp_ProcessEvent_15:
   \   00021E   7A00         MOV     R2,#0x0
   \   000220   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_14:
   \   000222   7409         MOV     A,#0x9
   \   000224   12....       LCALL   ?DEALLOC_XSTACK8
   \   000227   7F06         MOV     R7,#0x6
   \   000229   02....       LJMP    ?BANKED_LEAVE_XDATA
    346          }
    347          
    348          /*********************************************************************
    349           * Event Generation Functions
    350           */
    351          
    352          /*********************************************************************
    353           * @fn      GenericApp_ProcessZDOMsgs()
    354           *
    355           * @brief   Process response messages
    356           *
    357           * @param   none
    358           *
    359           * @return  none
    360           */
    361          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    362          {
    363            switch ( inMsg->clusterID )
    364            {
    365              case End_Device_Bind_rsp://ÇëÇóÊÇ·¢¸øÎÒÃÇµÄ Coordinator
    366                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )//ÕÇóÈë¾W³É¹¦
    367                {
    368                  // Light LED
    369                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );//½M¾WôªÔ±»ücÁÁ
    370                }
    371          #if defined( BLINK_LEDS )
    372                else
    373                {
    374                  // Flash LED to show failure
    375                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );//½M¾WÊ§¡£¬µÈÌì¶éW q îB
    376                }
    377          #endif
    378                break;
    379          
    380              case Match_Desc_rsp:
    381                {
    382                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    383                  if ( pRsp )
    384                  {
    385                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    386                    {
    387                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    388                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    389                      // Take the first endpoint, Can be changed to search through endpoints
    390                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    391          
    392                      // Light LED
    393                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    394                    }
    395                    osal_mem_free( pRsp );
    396                  }
    397                }
    398                break;
    399            }
    400          }
    401          
    402          /*********************************************************************
    403           * @fn      GenericApp_HandleKeys
    404           *
    405           * @brief   Handles all key events for this device.
    406           *
    407           * @param   shift - true if in shift/alt.
    408           * @param   keys - bit field for key events. Valid entries:
    409           *                 HAL_KEY_SW_4
    410           *                 HAL_KEY_SW_3
    411           *                 HAL_KEY_SW_2
    412           *                 HAL_KEY_SW_1
    413           *
    414           * @return  none
    415           */
    416          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    417          {
    418            zAddrType_t dstAddr;
    419          
    420            // Shift is used to make each button/switch dual purpose.
    421            if ( shift )
    422            {
    423              if ( keys & HAL_KEY_SW_1 )
    424              {
    425              }
    426              if ( keys & HAL_KEY_SW_2 )
    427              {
    428              }
    429              if ( keys & HAL_KEY_SW_3 )
    430              {
    431              }
    432              if ( keys & HAL_KEY_SW_4 )
    433              {
    434              }
    435            }
    436            else
    437            {
    438              if ( keys & HAL_KEY_SW_1 )
    439              {
    440                // Since SW1 isn't used for anything else in this application...
    441          #if defined( SWITCH1_BIND )
    442                // we can use SW1 to simulate SW2 for devices that only have one switch,
    443                keys |= HAL_KEY_SW_2;
    444          #elif defined( SWITCH1_MATCH )
    445                // or use SW1 to simulate SW4 for devices that only have one switch
    446                keys |= HAL_KEY_SW_4;
    447          #endif
    448              }
    449          
    450              if ( keys & HAL_KEY_SW_2 )
    451              {
    452                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    453          
    454                // Initiate an End Device Bind Request for the mandatory endpoint
    455                dstAddr.addrMode = Addr16Bit;
    456                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    457                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    458                                      GenericApp_epDesc.endPoint,
    459                                      GENERICAPP_PROFID,
    460                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    461                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    462                                      FALSE );
    463              }
    464          
    465              if ( keys & HAL_KEY_SW_3 )
    466              {
    467              }
    468          
    469              if ( keys & HAL_KEY_SW_4 )
    470              {
    471                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    472                // Initiate a Match Description Request (Service Discovery)
    473                dstAddr.addrMode = AddrBroadcast;
    474                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    475                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    476                                  GENERICAPP_PROFID,
    477                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    478                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    479                                  FALSE );
    480              }
    481            }
    482          }
    483          
    484          /*********************************************************************
    485           * LOCAL FUNCTIONS
    486           */
    487          
    488          /*********************************************************************
    489           * @fn      GenericApp_MessageMSGCB
    490           *
    491           * @brief   Data message processor callback.  This function processes
    492           *          any incoming data - probably from other devices.  So, based
    493           *          on cluster ID, perform the intended action.
    494           *
    495           * @param   none
    496           *
    497           * @return  none
    498           */
    499          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    500          {
    501          
    502            switch ( pkt->clusterId )
    503            {
    504              case GENERICAPP_CLUSTERID:
    505                
    506          
    507                break;
    508            }
    509          
    510          }
    511          
    512          /*********************************************************************
    513           * @fn      GenericApp_Send_wenshidu_Message
    514           *
    515           * @brief   point to point.
    516           *
    517           * @param   none
    518           *
    519           * @return  none
    520           */
    521          
    522          
    523          
    524          /*********************************************************************
    525           * @fn      GenericApp_SendTheMessage
    526           *
    527           * @brief   Send "the" message.
    528           *
    529           * @param   none
    530           *
    531           * @return  none
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          static void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    534          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    535           unsigned char theMessageData[10];
    536            int data;//¹âÕÕÖµ;
    537            data= (int)get_light();//¹âÕÕÖµ»ñÈ¡
   \   00000A                ; Setup parameters for call to function get_light
   \   00000A   12....       LCALL   ??get_light?relay
   \   00000D   12....       LCALL   ?R2345_FLT_TO_L
   \   000010   AC..         MOV     R4,?V0 + 0
   \   000012   AD..         MOV     R5,?V0 + 1
    538            theMessageData[0]='L';
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   744C         MOV     A,#0x4c
   \   00001C   12....       LCALL   ?Subroutine1 & 0xFFFF
    539            theMessageData[1]=data/10000%10+0x30;
   \                     ??CrossCallReturnLabel_2:
   \   00001F   7A10         MOV     R2,#0x10
   \   000021   7B27         MOV     R3,#0x27
   \   000023   12....       LCALL   ?S_DIV_MOD
   \   000026   7A0A         MOV     R2,#0xa
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   ?S_DIV_MOD
   \   00002D   EA           MOV     A,R2
   \   00002E   2430         ADD     A,#0x30
   \   000030   C0E0         PUSH    A
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   D0E0         POP     A
   \   000039   12....       LCALL   ?Subroutine1 & 0xFFFF
    540             theMessageData[2]=data/1000%10+0x30;
   \                     ??CrossCallReturnLabel_3:
   \   00003C   7AE8         MOV     R2,#-0x18
   \   00003E   7B03         MOV     R3,#0x3
   \   000040   12....       LCALL   ?S_DIV_MOD
   \   000043   7A0A         MOV     R2,#0xa
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   ?S_DIV_MOD
   \   00004A   EA           MOV     A,R2
   \   00004B   2430         ADD     A,#0x30
   \   00004D   C0E0         PUSH    A
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   D0E0         POP     A
   \   000056   12....       LCALL   ?Subroutine1 & 0xFFFF
    541            theMessageData[3]=data/100%10+0x30;
   \                     ??CrossCallReturnLabel_4:
   \   000059   7A64         MOV     R2,#0x64
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   12....       LCALL   ?S_DIV_MOD
   \   000060   7A0A         MOV     R2,#0xa
   \   000062   7B00         MOV     R3,#0x0
   \   000064   12....       LCALL   ?S_DIV_MOD
   \   000067   EA           MOV     A,R2
   \   000068   2430         ADD     A,#0x30
   \   00006A   C0E0         PUSH    A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   D0E0         POP     A
   \   000073   12....       LCALL   ?Subroutine0 & 0xFFFF
    542             theMessageData[4]=data/10%10+0x30;
   \                     ??CrossCallReturnLabel_0:
   \   000076   12....       LCALL   ?S_DIV_MOD
   \   000079   7A0A         MOV     R2,#0xa
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   12....       LCALL   ?S_DIV_MOD
   \   000080   EA           MOV     A,R2
   \   000081   2430         ADD     A,#0x30
   \   000083   C0E0         PUSH    A
   \   000085   7404         MOV     A,#0x4
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   D0E0         POP     A
   \   00008C   12....       LCALL   ?Subroutine0 & 0xFFFF
    543            theMessageData[5]=data%10+0x30;
   \                     ??CrossCallReturnLabel_1:
   \   00008F   12....       LCALL   ?S_DIV_MOD
   \   000092   EA           MOV     A,R2
   \   000093   2430         ADD     A,#0x30
   \   000095   C0E0         PUSH    A
   \   000097   7405         MOV     A,#0x5
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
    544              theMessageData[6]=0;
   \   00009F   7406         MOV     A,#0x6
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E4           CLR     A
   \   0000A5   F0           MOVX    @DPTR,A
    545            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    546                                 GENERICAPP_TWO,
    547                                 (byte)osal_strlen( theMessageData ) ,
                                                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    548                                 (byte *)&theMessageData,
    549                                 &GenericApp_TransID,
    550                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000A6                ; Setup parameters for call to function AF_DataRequest
   \   0000A6   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   0000B1   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   8582..       MOV     ?V0 + 0,DPL
   \   0000C1   8583..       MOV     ?V0 + 1,DPH
   \   0000C4   78..         MOV     R0,#?V0 + 0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9                ; Setup parameters for call to function osal_strlen
   \   0000C9   7405         MOV     A,#0x5
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   AA82         MOV     R2,DPL
   \   0000D0   AB83         MOV     R3,DPH
   \   0000D2   12....       LCALL   ??osal_strlen?relay
   \   0000D5   8A..         MOV     ?V0 + 0,R2
   \   0000D7   75..00       MOV     ?V0 + 1,#0x0
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   75..03       MOV     ?V0 + 0,#0x3
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   7920         MOV     R1,#0x20
   \   0000E9   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   0000EB   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   0000ED   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   0000EF   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   0000F1   12....       LCALL   ??AF_DataRequest?relay
   \   0000F4   7409         MOV     A,#0x9
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
    551            {
    552              // Successfully requested to be sent.
    553            }
    554            else
    555            {
    556              // Error occurred in request to send.
    557            }
    558          }
   \   0000F9   740A         MOV     A,#0xa
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FE   7F04         MOV     R7,#0x4
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   7A0A         MOV     R2,#0xa
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sensorID>`:
   \   000000   31           DB 49

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  
    559          
    560          #if defined( IAR_ARMCM3_LM )
    561          /*********************************************************************
    562           * @fn      GenericApp_ProcessRtosMessage
    563           *
    564           * @brief   Receive message from RTOS queue, send response back.
    565           *
    566           * @param   none
    567           *
    568           * @return  none
    569           */
    570          static void GenericApp_ProcessRtosMessage( void )
    571          {
    572            osalQueue_t inMsg;
    573          
    574            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    575            {
    576              uint8 cmndId = inMsg.cmnd;
    577              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    578          
    579              switch ( cmndId )
    580              {
    581                case CMD_INCR:
    582                  counter += 1;  /* Increment the incoming counter */
    583                                 /* Intentionally fall through next case */
    584          
    585                case CMD_ECHO:
    586                {
    587                  userQueue_t outMsg;
    588          
    589                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    590                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    591                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    592                  break;
    593                }
    594                
    595                default:
    596                  break;  /* Ignore unknown command */    
    597              }
    598            }
    599          }
    600          #endif
    601          
    602          /*********************************************************************
    603           */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    0      0      9
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
       -> HalLcdWriteString             0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
     GenericApp_ProcessEvent            0      0     32
       -> osal_msg_receive              0      0     46
       -> osal_start_timerEx            0      0     46
       -> osal_msg_deallocate           0      0     46
       -> osal_msg_receive              0      0     46
       -> ZDO_ParseEPListRsp            0      0     46
       -> HalLedSet                     0      0     46
       -> osal_mem_free                 0      0     46
       -> HalLedSet                     0      0     46
       -> HalLedSet                     0      0     46
       -> HalLedSet                     0      0     46
       -> NLME_GetShortAddr             0      0     46
       -> ZDP_EndDeviceBindReq          0      0     64
       -> HalLedSet                     0      0     46
       -> ZDP_MatchDescReq              0      0     62
       -> GenericApp_SendTheMessage     0      0     46
       -> osal_start_timerEx            0      0     46
     GenericApp_SendTheMessage          1      0     54
       -> get_light                     0      0     44
       -> osal_strlen                   0      0     54
       -> AF_DataRequest                0      0     62


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     GenericApp_ClusterList               8
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_NwkState                  1
     GenericApp_TransID                   1
     GenericApp_DstAddr                  12
     sensorID                             1
     GenericApp_Init                    116
     GenericApp_ProcessEvent            556
     GenericApp_SendTheMessage          259
     ?Subroutine0                         8
     ?Subroutine1                         6
     ?<Initializer for sensorID>          1
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ?<Constant "GenericApp">            11

 
 945 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  31 bytes in segment XDATA_ROM_C
  21 bytes in segment XDATA_Z
 
 964 bytes of CODE  memory
  31 bytes of CONST memory
  22 bytes of XDATA memory

Errors: none
Warnings: 1
