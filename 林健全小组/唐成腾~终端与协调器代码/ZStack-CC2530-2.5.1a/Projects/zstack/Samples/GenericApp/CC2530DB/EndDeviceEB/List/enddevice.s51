///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        27/Dec/2018  15:05:07 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\Source\enddevice.c            /
//    Command line       =  -f C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™ /
//                          ∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\To /
//                          ols\CC2530DB\f8wEndev.cfg (-DCPU32MHZ             /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\Tools /
//                          \CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x0004                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\XuaNJ\Desktop\±œ… /
//                          Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\GenericApp\Source /
//                          \enddevice.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\EndDeviceEB\Li /
//                          st\ -lA C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ /
//                          ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\GenericApp\CC2530DB£®’Ê£©\EndDev /
//                          iceEB\List\ --diag_suppress Pe001,Pa010 -o        /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\EndDeviceEB\Ob /
//                          j\ -e --no_code_motion --debug --core=plain       /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\ -I            /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\Source\ -I  /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\ZMain /
//                          \TI2530DB\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ /
//                           ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Samples\GenericApp\CC2530DB£®’Ê£©\ /
//                          ..\..\..\..\..\Components\hal\include\ -I         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\ -I               /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\mac\include\ -I                       /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\mac\high_level\ -I                    /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\ -I               /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\ -I   /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\mt\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DH /
//                          T11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5 /
//                          .1a\Projects\zstack\Samples\GenericApp\CC2530DB£® /
//                          ’Ê£©\..\..\..\..\..\Components\osal\include\ -I   /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\services\saddr\ -I                    /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\services\sdata\ -I                    /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\stack\af\ -I                          /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\stack\nwk\ -I                         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\stack\sapi\ -I                        /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\stack\sys\ -I                         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\stack\zdo\ -I                         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\..\..\..\..\.. /
//                          \Components\zmac\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\ /
//                          DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\GenericApp\CC2530DB /
//                          £®’Ê£©\..\..\..\..\..\Components\zmac\f8w\ -Ohz   /
//                          --require_prototypes                              /
//    List file          =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB£®’Ê£©\EndDeviceEB\Li /
//                          st\enddevice.s51                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME enddevice

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC ??To_string?relay
        FUNCTION ??To_string?relay,0203H
        PUBLIC ??sendLight?relay
        FUNCTION ??sendLight?relay,0203H
        PUBLIC ??sendTemp?relay
        FUNCTION ??sendTemp?relay,0203H
        PUBLIC ??sendTuRang?relay
        FUNCTION ??sendTuRang?relay,0203H
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P2INP
        PUBLIC To_string
        FUNCTION To_string,0203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_42c80000
        PUBLIC sendLight
        FUNCTION sendLight,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC sendTemp
        FUNCTION sendTemp,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC sendTuRang
        FUNCTION sendTuRang,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 74, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
HalLedBlink         SYMBOL "HalLedBlink"
osal_set_event      SYMBOL "osal_set_event"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
DHT11_TEST          SYMBOL "DHT11_TEST"
osal_memcpy         SYMBOL "osal_memcpy"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
HalAdcRead          SYMBOL "HalAdcRead"
osal_memset         SYMBOL "osal_memset"
sprintf             SYMBOL "sprintf"
getlight            SYMBOL "getlight"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11_TEST?relay  SYMBOL "?relay", DHT11_TEST
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??afRegister?relay  SYMBOL "?relay", afRegister
??getlight?relay    SYMBOL "?relay", getlight
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
To_string           SYMBOL "To_string"
??To_string?relay   SYMBOL "?relay", To_string
sendLight           SYMBOL "sendLight"
??sendLight?relay   SYMBOL "?relay", sendLight
sendTemp            SYMBOL "sendTemp"
??sendTemp?relay    SYMBOL "?relay", sendTemp
sendTuRang          SYMBOL "sendTuRang"
??sendTuRang?relay  SYMBOL "?relay", sendTuRang

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11_TEST
        FUNCTION DHT11_TEST,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN getlight
        FUNCTION getlight,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11_TEST?relay
        FUNCTION ??DHT11_TEST?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??getlight?relay
        FUNCTION ??getlight?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN shidu_ge
        EXTERN shidu_shi
        EXTERN wendu_ge
        EXTERN wendu_shi

// C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\enddevice.c
//    1 /******************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 #include <string.h>
//   69 #include "Coordinator.h"
//   70 #include "DebugTrace.h"
//   71 #include<stdlib.h>
//   72 
//   73 #if !defined( WIN32 )
//   74   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   75 #endif
//   76 
//   77 /* HAL */
//   78 #include "hal_lcd.h"
//   79 #include "hal_led.h"
//   80 #include "hal_key.h"
//   81 #include "hal_uart.h"
//   82 #include "hal_adc.h"
//   83 #include"stdio.h"
//   84 #include "DHT11.h" 
//   85 #include "IICLight.h" 
//   86 
//   87 #define SEND_DATA_EVENT 0x01
//   88 
//   89 #define DATA_PIN_AO HAL_ADC_CHANNEL_6        //∂®“ÂÕ®µ¿6Œ™ƒ£ƒ‚≤…—˘ø⁄£¨º¥P0_6°£
//   90 #define DATA_PIN_DO P1_5        //∂®“ÂP1.5ø⁄Œ™¥´∏–∆˜DO ‰»Î∂À
//   91 #define ID 0x01
//   92 /*********************************************************************
//   93  * GLOBAL VARIABLES
//   94  */
//   95 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   96 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DATA16
        DW 1
        DW 0
        DW 0
        DW 0
//   97 {
//   98   GENERICAPP_CLUSTERID
//   99 };
//  100 //≥ı ºªØ∂Àø⁄√Ë ˆ∑˚

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  101 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 0
        DATA16
        DW 0H
        DATA8
        DB 4
        DATA16
        DW GenericApp_ClusterList
//  102 {
//  103   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  104   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  105   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  106   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  107   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  108   0 ,       //  byte  AppNumInClusters;
//  109   (cId_t *)NULL,  //  byte *pAppInClusterList;
//  110   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  111   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  112 };                                                                           
//  113 
//  114 // This is the Endpoint/Interface description.  It is defined here, but
//  115 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  116 // in the structure here and make it a "const" (in code space).  The
//  117 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  118 endPointDesc_t GenericApp_epDesc;//Ω⁄µ„√Ë ˆ∑˚
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  119 
//  120 /*********************************************************************
//  121  * EXTERNAL VARIABLES
//  122  */
//  123 
//  124 /*********************************************************************
//  125  * EXTERNAL FUNCTIONS
//  126  */
//  127 
//  128 /*********************************************************************
//  129  * LOCAL VARIABLES
//  130  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 byte GenericApp_TaskID;   //»ŒŒÒ”≈œ»º∂  
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  132                           // Task ID for internal task/event processing
//  133                           // This variable will be received when
//  134                           // GenericApp_Init() is called.
//  135 devStates_t GenericApp_NwkState;
//  136 
//  137 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 byte GenericApp_TransID; // ˝æ›∑¢ÀÕ–Ú¡–∫≈  
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139                          // This is the unique message ID (counter)
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 devStates_t GenericApp_NwkState;//±£¥ÊΩ⁄µ„◊¥Ã¨
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 //void SendInfo(void);
//  146 void To_string(uint8 *dest,char *src,uint8 length);
//  147 void sendTuRang(void);
//  148 void sendTemp(void);
//  149 void sendLight(void);
//  150 
//  151 /*********************************************************************
//  152  * @fn      GenericApp_Init
//  153  *
//  154  * @brief   Initialization function for the Generic App Task.
//  155  *          This is called during initialization and should contain
//  156  *          any application specific initialization (ie. hardware
//  157  *          initialization/setup, table initialization, power up
//  158  *          notificaiton ... ).
//  159  *
//  160  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  161  *                    used to send messages and set timers.
//  162  *
//  163  * @return  none
//  164  */
//  165 //»ŒŒÒ≥ı ºªØ∫Ø ˝ 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  166 void GenericApp_Init( uint8 task_id )
GenericApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GenericApp_Init
        CODE
//  167 {
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  168  
//  169   GenericApp_TaskID = task_id;//≥ı ºªØ»ŒŒÒ”≈œ»º∂
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  170   GenericApp_NwkState = DEV_INIT;//≥ı ºªØŒ™DEV_INIT,±ÌΩ⁄µ„√ª”–¡¨Ω”µΩZigBeeÕ¯¬Á
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  171   GenericApp_TransID = 0;//∑¢ÀÕ ˝æ›∞¸µƒ–Ú¡–∫≈≥ı ºªØŒ™0
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  172   //∂‘Ω⁄µ„√Ë ˆ∑˚Ω¯––≥ı ºªØ 
//  173   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  174   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  175   GenericApp_epDesc.simpleDesc
//  176             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  177   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  178   //afRegister()∫Ø ˝Ω´Ω⁄µ„√Ë ˆ∑˚Ω¯––◊¢≤·£¨◊¢≤·∫Û≤≈ø…“‘ π”√OSALÃ·π©µƒœµÕ≥∑˛ŒÒ  
//  179   // Register the endpoint description with the AF
//  180   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  181   
//  182   //≥ı ºªØDO(P1_5)ø⁄
//  183   P1DIR &= ~0x20;          //P1.5∂®“ÂŒ™ ‰»Îø⁄ 
        ANL     0xfe,#0xdf
//  184   P1INP &=~0x20;  
        ANL     0xf6,#0xdf
//  185   P2INP |= 0x40;  //œ¬¿≠
        ORL     0xf7,#0x40
//  186   P0DIR |= 0x80;          //P1.5∂®“ÂŒ™ ‰≥ˆø⁄ 
        ORL     0xfd,#0x80
//  187 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P1DIR
        REQUIRE P1INP
        REQUIRE P2INP
        REQUIRE P0DIR
//  188 /*********************************************************************
//  189  * @fn      GenericApp_ProcessEvent
//  190  *
//  191  * @brief   Generic Application Task event processor.  This function
//  192  *          is called to process all events for the task.  Events
//  193  *          include timers, messages and any other user defined events.
//  194  *
//  195  * @param   task_id  - The OSAL assigned task ID.
//  196  * @param   events - events to process.  This is a bit map and can
//  197  *                   contain more than one event.
//  198  *
//  199  * @return  none
//  200  */
//  201 //œ˚œ¢¥¶¿Ì∫Ø ˝

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  202 uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
        CODE
//  203 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, sendTemp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, sendTuRang
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, sendLight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  204   afIncomingMSGPacket_t *MSGpkt;
//  205 
//  206 
//  207   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??GenericApp_ProcessEvent_0
//  208   {
//  209     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  210     while ( MSGpkt )
//  211     {
//  212       switch ( MSGpkt->hdr.event )
??GenericApp_ProcessEvent_2:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0xd1
        JNZ     ??GenericApp_ProcessEvent_3
//  213       {
//  214        
//  215 
//  216        
//  217         case ZDO_STATE_CHANGE://º”»ÎÕ¯¬Á∫Û£¨º”»Î◊Â÷– 
//  218           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);//∂¡»°Ω⁄µ„µƒ…Ë±∏¿‡–Õ  
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  219           if ( (GenericApp_NwkState == DEV_ZB_COORD)
//  220               || (GenericApp_NwkState == DEV_ROUTER)
//  221               || (GenericApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??GenericApp_ProcessEvent_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??GenericApp_ProcessEvent_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_3
//  222           {
//  223              HalLedBlink(HAL_LED_1,0,50,500);    //“—º”»ÎLED1 …¡À∏£®ºÏ≤‚£© 
??GenericApp_ProcessEvent_4:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  224              
//  225             // Start sending "the" message in a regular interval.
//  226             osal_set_event( GenericApp_TaskID,
//  227                                 SEND_DATA_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  228           }
//  229           break;
//  230 
//  231         default:
//  232           break;
//  233       }
//  234 
//  235       // Release the memory
//  236       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  237 
//  238       // Next
//  239       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  240     }
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??GenericApp_ProcessEvent_2
//  241 
//  242     // return unprocessed events
//  243     return (events ^ SYS_EVENT_MSG);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??GenericApp_ProcessEvent_5:
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_6
//  244   }
//  245 
//  246   // Send a message out - This event is generated by a timer
//  247   //  (setup in GenericApp_Init()).
//  248   if ( events & SEND_DATA_EVENT )
??GenericApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??GenericApp_ProcessEvent_7
//  249   {
//  250      HalLedBlink(HAL_LED_2,0,50,500);    //Ω·π˚“ª∑¢ÀÕµΩ¥Æø⁄LED2 …¡À∏ £®ºÏ≤‚£©  
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  251   
//  252      sendTemp();
        ; Setup parameters for call to function sendTemp
        LCALL   ??sendTemp?relay
//  253      sendTuRang();
        ; Setup parameters for call to function sendTuRang
        LCALL   ??sendTuRang?relay
//  254      sendLight();
        ; Setup parameters for call to function sendLight
        LCALL   ??sendLight?relay
//  255      
//  256    osal_start_timerEx(GenericApp_TaskID,SEND_DATA_EVENT,5000);//∂® ±5000ms
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  257     return (events ^ SEND_DATA_EVENT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??GenericApp_ProcessEvent_5
//  258   }
//  259 
//  260   
//  261 
//  262   return 0;
??GenericApp_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  263 }
//  264 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void sendTemp(void)
sendTemp:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function sendTemp
        CODE
//  266 {
        FUNCALL sendTemp, DHT11_TEST
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTemp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTemp, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTemp, To_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTemp, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  267   RFTX rftx;
//  268  // uint16 tempvalue;
//  269   uint16 nwk;
//  270   DHT11_TEST();
        ; Setup parameters for call to function DHT11_TEST
        LCALL   ??DHT11_TEST?relay
//  271   
//  272    rftx.BUF.value[0]='T';//±Ì æŒ¬∂» ˝æ›
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x54
        MOVX    @DPTR,A
//  273    rftx.BUF.value[1]=wendu_shi+'0';
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  274    rftx.BUF.value[2]=wendu_ge+'0';
        MOV     DPTR,#wendu_ge
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  275    
//  276     rftx.BUF.value[3]='H'; //±Ì æ ™∂» ˝æ› 
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x48
        MOVX    @DPTR,A
//  277     rftx.BUF.value[4]=shidu_shi+'0';
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  278     rftx.BUF.value[5]=shidu_ge+'0';
        MOV     DPTR,#shidu_ge
        MOVX    A,@DPTR
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
//  279    
//  280      
//  281      osal_memcpy(rftx.BUF.head,"&&",2);
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  282       rftx.BUF.deviceID[0]='I'; 
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
//  283        rftx.BUF.deviceID[1]='D'; 
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
//  284         rftx.BUF.deviceID[2]=ID+'0'; 
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x31
        MOVX    @DPTR,A
//  285      nwk=NLME_GetShortAddr();//∏√∫Ø ˝∑µªÿ∏√Ω⁄µ„µƒÕ¯¬Áµÿ÷∑
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine0 & 0xFFFF
//  286      To_string(rftx.BUF.myNWK,(uint8 *)&nwk,2);
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??To_string?relay
//  287      // πÕ¯¬Áµÿ÷∑“‘16Ω¯÷∆–Œ Ω ‰≥ˆµΩ¥Æø⁄
//  288     
//  289      
//  290      afAddrType_t my_DstAddr;
//  291      my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;//…Ë÷√Œ™µ•≤•
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  292       my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  293        my_DstAddr.addr.shortAddr=0x0000;//0x0000 «–≠µ˜∆˜µƒÕ¯¬Áµÿ÷∑
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  294        AF_DataRequest(&my_DstAddr,//∞¸∫¨¡ÀΩ⁄µ„µƒÕ¯¬Áµÿ÷∑£¨∑¢ÀÕ ˝æ›µƒ∏Ò Ω»Áµ•≤•∂‡≤•
//  295                       &GenericApp_epDesc,//∂Àø⁄∫≈
//  296                        GENERICAPP_WENSHI_CLUSTERID ,//√¸¡Ó∫≈2
//  297                       15,//∑¢ÀÕµƒ≥§∂»
//  298                       (uint8 *)&rftx,//¥Ê∑≈∑¢ÀÕµƒƒ⁄»›
//  299                       &GenericApp_TransID,//∑¢ÀÕ–Ú¡–∫≈£¨ª·◊‘º”1£¨”√”⁄≈–∂œ «∑Ò∂™∞¸
//  300                       AF_DISCV_ROUTE,
//  301                       AF_DEFAULT_RADIUS
//  302                       );
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,#0xf
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  303      
//  304     //HalLedBlink(HAL_LED_2,0,50,500);
//  305 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  306 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 void sendTuRang(void)
sendTuRang:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function sendTuRang
        CODE
//  308 {
        FUNCALL sendTuRang, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTuRang, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTuRang, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTuRang, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTuRang, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTuRang, To_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendTuRang, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 49
        MOV     A,#-0x31
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  309     RFTX rftx;
//  310     uint16 nwk;
//  311  //   byte data_do=0;  //DOø⁄µÁ∆Ω
//  312     uint16 temp=0;//∞Ÿ∑÷±»µƒ’˚ ˝÷µ
        MOV     R6,#0x0
        MOV     R7,#0x0
//  313     byte str_adc[20]={0};//Õ¡»¿ ™∂»∞Ÿ∑÷±»◊÷∑˚¥Æ
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  314     float vol=0.0; //adc≤…—˘µÁ—π  
//  315     byte len=19;
//  316     uint16 adc= HalAdcRead(DATA_PIN_AO, HAL_ADC_RESOLUTION_14); //ADC≤…—˘÷µ
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x6
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  317 
//  318     osal_memset(str_adc, 0, len);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x13
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  319     
//  320     //◊Ó¥Û≤…—˘÷µ8192(“ÚŒ™◊Ó∏ﬂŒª «∑˚∫≈Œª)
//  321     if(adc>=8192)
        CLR     C
        MOV     A,?V0 + 1
        SUBB    A,#0x20
        JC      ??sendTuRang_0
//  322     {
//  323         sprintf(str_adc, "error");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "error">` & 0xff
        MOV     R5,#(`?<Constant "error">` >> 8) & 0xff
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
//  324         len=5;
        SJMP    ??sendTuRang_1
//  325     }
//  326     else
//  327     { 
//  328         adc=8192-adc;
//  329         //∑¥œ‡“ªœ¬£¨“ÚŒ™µÕ ™∂» ±AOø⁄ ‰≥ˆΩœ∏ﬂµÁ∆Ω,∏ﬂ ™∂» ±AOø⁄ ‰≥ˆΩœµÕµÁ∆Ω   
//  330         
//  331         //◊™ªØŒ™∞Ÿ∑÷±»
//  332         vol=(float)((float)adc)/8192.0;
//  333                
//  334         //»°∞Ÿ∑÷±»¡ΩŒª ˝◊÷
//  335         temp=vol*100; //¥”∏°µ„µΩ’˚ ˝µƒ“˛ Ω◊™ªª
??sendTuRang_0:
        CLR     A
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,#0x20
        SUBB    A,?V0 + 1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  336     }   
//  337         //±‰≥…ø… ”µƒ◊÷∑˚ ‰≥ˆ  
//  338    rftx.BUF.value[0]='R';
??sendTuRang_1:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x52
        LCALL   ?Subroutine3 & 0xFFFF
//  339    rftx.BUF.value[1]=temp/10+'0';
??CrossCallReturnLabel_9:
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
//  340    rftx.BUF.value[2]=temp%10+'0';
??CrossCallReturnLabel_10:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  341    rftx.BUF.value[3]='%';
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x25
        MOVX    @DPTR,A
//  342    rftx.BUF.value[4]='*';
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2a
        MOVX    @DPTR,A
//  343    rftx.BUF.value[5]='*';
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2a
        LCALL   ?Subroutine1 & 0xFFFF
//  344      osal_memcpy(rftx.BUF.head,"&&",2);
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  345      
//  346      nwk=NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine0 & 0xFFFF
//  347      To_string(rftx.BUF.myNWK,(uint8 *)&nwk,2);
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??To_string?relay
//  348      
//  349     rftx.BUF.deviceID[0]='I'; 
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
//  350        rftx.BUF.deviceID[1]='D'; 
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
//  351         rftx.BUF.deviceID[2]=ID+'0'; 
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x31
        MOVX    @DPTR,A
//  352      
//  353      
//  354      afAddrType_t my_DstAddr;
//  355      my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  356       my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  357        my_DstAddr.addr.shortAddr=0x0000;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  358        AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,
//  359                       GENERICAPP_TURANG_CLUSTERID ,//√¸¡Ó∫≈3
//  360                       15,
//  361                       (uint8 *)&rftx,
//  362                       &GenericApp_TransID,
//  363                       AF_DISCV_ROUTE,
//  364                       AF_DEFAULT_RADIUS
//  365                       );
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 70)
        MOV     ?V0 + 0,#0xf
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 72)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 74)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 65)
//  366      
//  367     
//  368 }
        MOV     A,#0x31
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "&&">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "&&">` >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 65)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function To_string
        ; Setup parameters for call to function To_string
        ; Setup parameters for call to function To_string
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  369 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  370 void sendLight(void)
sendLight:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function sendLight
        CODE
//  371 {
        FUNCALL sendLight, getlight
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendLight, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendLight, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendLight, To_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendLight, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
//  372   RFTX rftx;
//  373   uint16 wan,qian,bai,shi,ge;
//  374   uint16 nwk;
//  375    unsigned short int temp_data=getlight();
        ; Setup parameters for call to function getlight
        LCALL   ??getlight?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  376   
//  377     wan=temp_data/10000+0x30 ;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     ?V0 + 2,A
//  378     temp_data=temp_data%10000;   //»°”‡‘ÀÀ„
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  379     qian=temp_data/1000+0x30 ;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     ?V0 + 0,A
//  380     temp_data=temp_data%1000;    //»°”‡‘ÀÀ„
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
//  381     bai=temp_data/100+0x30   ;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     R6,A
//  382     temp_data=temp_data%100;     //»°”‡‘ÀÀ„
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
//  383     shi=temp_data/10+0x30    ;
//  384     temp_data=temp_data%10;      //»°”‡‘ÀÀ„
//  385     ge=temp_data+0x30; 
//  386     
//  387    rftx.BUF.value[0]='S';
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x53
        MOVX    @DPTR,A
//  388    rftx.BUF.value[1]=(unsigned char)wan;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  389    rftx.BUF.value[2]=(unsigned char)qian;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  390    rftx.BUF.value[3]=(unsigned char)bai;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        LCALL   ?Subroutine4 & 0xFFFF
//  391    rftx.BUF.value[4]=(unsigned char)shi;  
??CrossCallReturnLabel_11:
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  392    rftx.BUF.value[5]=(unsigned char)ge; 
??CrossCallReturnLabel_12:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
//  393     
//  394      
//  395      osal_memcpy(rftx.BUF.head,"&&",2);
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
//  396      
//  397      nwk=NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine0 & 0xFFFF
//  398      To_string(rftx.BUF.myNWK,(uint8 *)&nwk,2);
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??To_string?relay
//  399                 
//  400      
//  401      rftx.BUF.deviceID[0]='I'; 
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
//  402        rftx.BUF.deviceID[1]='D'; 
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
//  403         rftx.BUF.deviceID[2]=ID+'0'; 
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x31
        MOVX    @DPTR,A
//  404      
//  405      
//  406      
//  407      afAddrType_t my_DstAddr;
//  408      my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  409       my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  410        my_DstAddr.addr.shortAddr=0x0000;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  411        AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,
//  412                       GENERICAPP_GUANG_CLUSTERID,//√¸¡Ó∫≈4
//  413                       15,
//  414                       (uint8 *)&rftx,
//  415                       &GenericApp_TransID,
//  416                       AF_DISCV_ROUTE,
//  417                       AF_DEFAULT_RADIUS
//  418                       );
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V0 + 0,#0xf
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
//  419      
//  420     
//  421 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
//  422 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  423 void To_string(uint8 *dest,char * src,uint8 length)
To_string:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function To_string
        CODE
//  424 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  425   uint8 *xad;
//  426   uint8 i=0;
//  427   uint8 ch;
//  428   xad=src+length-1;
        MOV     ?V0 + 0,R6
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
//  429   for(i=0;i<length;i++,xad--)
        MOV     R7,#0x0
        SJMP    ??To_string_0
//  430   {
//  431     ch=(*xad>>4)&0x0F;
//  432     dest[i<<1]=ch+((ch<10)?'0':'7');
//  433     ch=*xad&0x0F;
//  434     dest[(i<<1)+1]=ch+((ch<10)?'0':'7');
??To_string_1:
        MOV     R4,#0x37
??To_string_2:
        MOV     A,R4
        ADD     A,?V0 + 0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R7
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
??To_string_0:
        MOV     A,R7
        CLR     C
        SUBB    A,R6
        JNC     ??To_string_3
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     ?V0 + 0,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??To_string_4
        MOV     R4,#0x30
        SJMP    ??To_string_5
??To_string_4:
        MOV     R4,#0x37
??To_string_5:
        MOV     A,R4
        ADD     A,?V0 + 0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     ?V0 + 0,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??To_string_1
        MOV     R4,#0x30
        SJMP    ??To_string_2
//  435   }
//  436 }
??To_string_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock23

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendTemp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendTemp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendTuRang?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendTuRang

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendLight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??To_string?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    To_string

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "&&">`:
        DB "&&"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "error">`:
        DB "error"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        END
// 
// 1 447 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//    57 bytes in segment XDATA_ROM_C
//    21 bytes in segment XDATA_Z
// 
// 1 483 bytes of CODE  memory
//    49 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 4 bytes shared)
//    21 bytes of XDATA memory
//
//Errors: none
//Warnings: 6
