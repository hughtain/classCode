###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         19/Dec/2018  20:16:47 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\Z #
#                          Main\TI2530DB\ZMain.c                              #
#    Command line       =  -f C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂ #
#                          »+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func    #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂ #
#                          »+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0          #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x0004                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\XuaNJ\Desktop\±œ…Ë #
#                          \DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2 #
#                          .5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c -D    #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D HAL_UART=TRUE -lC        #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\CoordinatorEB\List\     #
#                          -lA C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™ #
#                          ∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zsta #
#                          ck\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ #
#                           --diag_suppress Pe001,Pa010 -o                    #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\CoordinatorEB\Obj\ -e   #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂ #
#                          »+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\ -I                  #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\Source\ -I           #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB #
#                          \ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿  #
#                          ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\hal\include\ -I C:\Users\XuaNJ\Desktop\±œ… #
#                          Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\Components\hal\target\CC2530EB\    #
#                          -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂ #
#                          »+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\include\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\ #
#                          DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\. #
#                          .\..\..\..\..\Components\mac\high_level\ -I        #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\ -I                         #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\ -I             #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mt\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+ #
#                          Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                      #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\ #
#                          DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2. #
#                          5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\. #
#                          .\..\..\..\..\Components\services\sdata\ -I        #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ #
#                          ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\nwk\ -I                   #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sapi\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT1 #
#                          1Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\GenericApp\CC2530DB\..\.. #
#                          \..\..\..\Components\stack\sec\ -I                 #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11 #
#                          Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\zdo\ -I                  #
#                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂ #
#                          »+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\f8w\ -Ohz --require_prototypes #
#    List file          =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\CoordinatorEB\List\ZMai #
#                          n.lst                                              #
#    Object file        =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π #
#                          ‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZMain #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #ifndef NONWK
     46          #include "AF.h"
     47          #endif
     48          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr APCFG
   \                     APCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "hal_flash.h"
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_drivers.h"
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Nv.h"
     56          #include "ZComDef.h"
     57          #include "ZMAC.h"
     58          
     59          /*********************************************************************
     60           * LOCAL FUNCTIONS
     61           */
     62          
     63          static void zmain_ext_addr( void );
     64          #if defined ZCL_KEY_ESTABLISH
     65          static void zmain_cert_init( void );
     66          #endif
     67          static void zmain_dev_info( void );
     68          static void zmain_vdd_check( void );
     69          
     70          #ifdef LCD_SUPPORTED
     71          static void zmain_lcd_init( void );
     72          #endif
     73          uint16 myApp_ReadyanwuLevel(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          uint16 myApp_ReadyanwuLevel(void)
   \                     myApp_ReadyanwuLevel:
     75          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     76              uint16 reading = 0;
     77           P0DIR&=~(1<<7);
   \   000004   53FD7F       ANL     0xfd,#0x7f
     78           APCFG|=1<<7;//P07  ADCø™∆Ù
   \   000007   43F280       ORL     0xf2,#0x80
     79            /* Enable channel */
     80             ADCCON3=0X07;
   \   00000A   75B607       MOV     0xb6,#0x7
     81            /* writing to this register starts the extra conversion */
     82            ADCCON3 = 0xb0;//12bitæ´∂»
   \   00000D   75B6B0       MOV     0xb6,#-0x50
     83            
     84            /* Wait for the conversion to be done */
     85            while (!(ADCCON1 & 0x80));
   \                     ??myApp_ReadyanwuLevel_0:
   \   000010   E5B4         MOV     A,0xb4
   \   000012   A2E7         MOV     C,0xE0 /* A   */.7
   \   000014   50FA         JNC     ??myApp_ReadyanwuLevel_0
     86            
     87            /* Disable channel after done conversion */
     88           // ADCCFG &= (0x02 ^ 0xFF);
     89            
     90            /* Read the result */
     91            reading =  ADCL >> 4;                //ADCL ºƒ¥Ê∆˜µÕ 2 ŒªŒﬁ–ß 
   \   000016   E5BA         MOV     A,0xba
     92            reading |= (((UINT16)ADCH) << 4);
   \   000018   C4           SWAP    A
   \   000019   540F         ANL     A,#0xf
   \   00001B   FA           MOV     R2,A
   \   00001C   85BB..       MOV     ?V0 + 0,0xbb
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   7404         MOV     A,#0x4
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?S_SHL
   \   000029   EA           MOV     A,R2
   \   00002A   45..         ORL     A,?V0 + 0
   \   00002C   FA           MOV     R2,A
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   FB           MOV     R3,A
     93            if(reading&0x800)//»Áπ˚ «1£¨±Ì æ «∏∫ ˝£¨ «≤π¬Î£¨–Ë“™»°∑¥
   \   000030   5408         ANL     A,#0x8
   \   000032   6009         JZ      ??myApp_ReadyanwuLevel_1
     94            reading=0xfff- reading;
   \   000034   74FF         MOV     A,#-0x1
   \   000036   C3           CLR     C
   \   000037   9A           SUBB    A,R2
   \   000038   FA           MOV     R2,A
   \   000039   740F         MOV     A,#0xf
   \   00003B   9B           SUBB    A,R3
   \   00003C   FB           MOV     R3,A
     95            return ( reading);
   \                     ??myApp_ReadyanwuLevel_1:
   \   00003D   D0..         POP     ?V0 + 1
   \   00003F   D0..         POP     ?V0 + 0
   \   000041   02....       LJMP    ?BRET
   \   000044                REQUIRE P0DIR
   \   000044                REQUIRE APCFG
   \   000044                REQUIRE ADCCON3
   \   000044                REQUIRE ADCCON1
   \   000044                REQUIRE ADCL
   \   000044                REQUIRE ADCH
     96          }
     97          
     98          /*********************************************************************
     99           * @fn      main
    100           * @brief   First function called after startup.
    101           * @return  don't care
    102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          int main( void )
   \                     main:
    104          {
   \   000000                ; Auto size: 0
    105            // Turn off interrupts
    106            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
    107          
    108            // Initialization for board related stuff such as LEDs
    109            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   C290         CLR     0x90.0
   \   000032   43FE01       ORL     0xfe,#0x1
   \   000035   C291         CLR     0x90.1
   \   000037   43FE02       ORL     0xfe,#0x2
   \   00003A   C294         CLR     0x90.4
   \   00003C   43FE10       ORL     0xfe,#0x10
   \   00003F   438F01       ORL     0x8f,#0x1
    110          
    111            // Make sure supply voltage is high enough to run
    112            zmain_vdd_check();
   \   000042   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   000044                ; Setup parameters for call to function HalAdcCheckVdd
   \   000044   794A         MOV     R1,#0x4a
   \   000046   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000049   E9           MOV     A,R1
   \   00004A   60F8         JZ      ??main_3
   \   00004C   1E           DEC     R6
   \   00004D   EE           MOV     A,R6
   \   00004E   70F4         JNZ     ??main_3
    113          
    114            // Initialize board I/O
    115            InitBoard( OB_COLD );
   \   000050                ; Setup parameters for call to function InitBoard
   \   000050   7900         MOV     R1,#0x0
   \   000052   12....       LCALL   ??InitBoard?relay
    116          
    117            // Initialze HAL drivers
    118            HalDriverInit();
   \   000055                ; Setup parameters for call to function HalDriverInit
   \   000055   12....       LCALL   ??HalDriverInit?relay
    119          
    120            // Initialize NV System
    121            osal_nv_init( NULL );
   \   000058                ; Setup parameters for call to function osal_nv_init
   \   000058   7A00         MOV     R2,#0x0
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   ??osal_nv_init?relay
    122          
    123            // Initialize the MAC
    124            ZMacInit();
   \   00005F                ; Setup parameters for call to function ZMacInit
   \   00005F   12....       LCALL   ??ZMacInit?relay
    125          
    126            // Determine the extended address
    127            zmain_ext_addr();
   \   000062                ; Setup parameters for call to function zmain_ext_addr
   \   000062   12....       LCALL   ??zmain_ext_addr?relay
    128          
    129          #if defined ZCL_KEY_ESTABLISH
    130            // Initialize the Certicom certificate information.
    131            zmain_cert_init();
    132          #endif
    133          
    134            // Initialize basic NV items
    135            zgInit();
   \   000065                ; Setup parameters for call to function zgInit
   \   000065   12....       LCALL   ??zgInit?relay
    136          
    137          #ifndef NONWK
    138            // Since the AF isn't a task, call it's initialization routine
    139            afInit();
    140          #endif
    141          
    142            // Initialize the operating system
    143            osal_init_system();
   \   000068                ; Setup parameters for call to function osal_init_system
   \   000068   12....       LCALL   ??osal_init_system?relay
    144          
    145            // Allow interrupts
    146            osal_int_enable( INTS_ALL );
   \   00006B                ; Setup parameters for call to function osal_int_enable
   \   00006B   79FF         MOV     R1,#-0x1
   \   00006D   12....       LCALL   ??osal_int_enable?relay
    147          
    148            // Final board initialization
    149            InitBoard( OB_READY );
   \   000070                ; Setup parameters for call to function InitBoard
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   ??InitBoard?relay
    150          
    151            // Display information about this device
    152            zmain_dev_info();
   \   000075                ; Setup parameters for call to function zmain_dev_info
   \   000075   12....       LCALL   ??zmain_dev_info?relay
    153          
    154            /* Display the device info on the LCD */
    155          #ifdef LCD_SUPPORTED
    156            zmain_lcd_init();
   \   000078                ; Setup parameters for call to function HalLcdWriteString
   \   000078   7901         MOV     R1,#0x1
   \   00007A   7A..         MOV     R2,#`?<Constant "TexasInstruments">` & 0xff
   \   00007C   7B..         MOV     R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
   \   00007E   12....       LCALL   ??HalLcdWriteString?relay
    157          #endif
    158          
    159          #ifdef WDT_IN_PM1
    160            /* If WDT is used, this is a good place to enable it. */
    161            WatchDogEnable( WDTIMX );
    162          #endif
    163          
    164            osal_start_system(); // No Return from here
   \   000081                ; Setup parameters for call to function osal_start_system
   \   000081   12....       LCALL   ??osal_start_system?relay
    165          
    166            return 0;  // Shouldn't get here.
   \   000084   7A00         MOV     R2,#0x0
   \   000086   7B00         MOV     R3,#0x0
   \   000088   02....       LJMP    ?BRET
   \   00008B                REQUIRE SLEEPCMD
   \   00008B                REQUIRE SLEEPSTA
   \   00008B                REQUIRE CLKCONCMD
   \   00008B                REQUIRE CLKCONSTA
   \   00008B                REQUIRE _A_P1
   \   00008B                REQUIRE P1DIR
   \   00008B                REQUIRE P0INP
    167          } // main()
    168          
    169          /*********************************************************************
    170           * @fn      zmain_vdd_check
    171           * @brief   Check if the Vdd is OK to run the processor.
    172           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    173           *********************************************************************/
    174          static void zmain_vdd_check( void )
    175          {
    176            uint8 cnt = 16;
    177            
    178            do {
    179              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    180            } while (--cnt);
    181          }
    182          
    183          /**************************************************************************************************
    184           * @fn          zmain_ext_addr
    185           *
    186           * @brief       Execute a prioritized search for a valid extended address and write the results
    187           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    188           *
    189           * input parameters
    190           *
    191           * None.
    192           *
    193           * output parameters
    194           *
    195           * None.
    196           *
    197           * @return      None.
    198           **************************************************************************************************
    199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    201          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    202            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    203            uint8 writeNV = TRUE;
    204          
    205            // First check whether a non-erased extended address exists in the OSAL NV.
    206            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    207                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    208                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_nv_item_init?relay
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   7057         JNZ     ??zmain_ext_addr_0
   \   00003B                ; Setup parameters for call to function osal_nv_read
   \   00003B   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..08       MOV     ?V0 + 0,#0x8
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A01         MOV     R2,#0x1
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   702E         JNZ     ??zmain_ext_addr_0
   \   000064                ; Setup parameters for call to function osal_memcmp
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   A982         MOV     R1,DPL
   \   00006C   AA83         MOV     R2,DPH
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   8A..         MOV     ?V0 + 1,R2
   \   000072   75..00       MOV     ?V0 + 2,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000080   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??osal_memcmp?relay
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    209            {
    210              // Attempt to read the extended address from the location on the lock bits page
    211              // where the programming tools know to reserve it.
    212              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000092                ; Setup parameters for call to function HalFlashRead
   \   000092   75..08       MOV     ?V0 + 0,#0x8
   \   000095   75..00       MOV     ?V0 + 1,#0x0
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   00009F   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A1   7AE8         MOV     R2,#-0x18
   \   0000A3   7B07         MOV     R3,#0x7
   \   0000A5   797F         MOV     R1,#0x7f
   \   0000A7   12....       LCALL   ??HalFlashRead?relay
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    213          
    214              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AF                ; Setup parameters for call to function osal_memcmp
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   A982         MOV     R1,DPL
   \   0000B7   AA83         MOV     R2,DPH
   \   0000B9   89..         MOV     ?V0 + 0,R1
   \   0000BB   8A..         MOV     ?V0 + 1,R2
   \   0000BD   75..00       MOV     ?V0 + 2,#0x0
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C08         MOV     R4,#0x8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000CB   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ??osal_memcmp?relay
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   6035         JZ      ??zmain_ext_addr_2
    215              {
    216                // Attempt to read the extended address from the designated location in the Info Page.
    217                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000DA                ; Setup parameters for call to function osal_memcmp
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   790C         MOV     R1,#0xc
   \   0000E5   7A78         MOV     R2,#0x78
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   12....       LCALL   ??osal_memcmp?relay
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV     A,R1
   \   0000F2   7054         JNZ     ??zmain_ext_addr_3
    218                {
    219                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   75..0C       MOV     ?V0 + 0,#0xc
   \   0000F7   75..78       MOV     ?V0 + 1,#0x78
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000105   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000107   12....       LCALL   ??osal_memcpy?relay
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    220                }
    221                else  // No valid extended address was found.
    222                {
    223                  uint8 idx;
    224                  
    225          #if !defined ( NV_RESTORE )
    226                  writeNV = FALSE;  // Make this a temporary IEEE address
    227          #endif
    228          
    229                  /* Attempt to create a sufficiently random extended address for expediency.
    230                   * Note: this is only valid/legal in a test environment and
    231                   *       must never be used for a commercial product.
    232                   */
    233                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    234                  {
    235                    uint16 randy = osal_rand();
    236                    aExtendedAddress[idx++] = LO_UINT16(randy);
    237                    aExtendedAddress[idx++] = HI_UINT16(randy);
    238                  }
    239                  // Next-to-MSB identifies ZigBee devicetype.
    240          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    241                  aExtendedAddress[idx++] = 0x10;
    242          #elif ZG_BUILD_RTRONLY_TYPE
    243                  aExtendedAddress[idx++] = 0x20;
    244          #else
    245                  aExtendedAddress[idx++] = 0x30;
    246          #endif
    247                  // MSB has historical signficance.
    248                  aExtendedAddress[idx] = 0xF8;
    249                }
    250              }
    251          
    252              if (writeNV)
    253              {
    254                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00010F                ; Setup parameters for call to function osal_nv_write
   \   00010F   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000112   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000115   78..         MOV     R0,#?V0 + 0
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   75..08       MOV     ?V0 + 0,#0x8
   \   00011D   75..00       MOV     ?V0 + 1,#0x0
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   7C00         MOV     R4,#0x0
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7A01         MOV     R2,#0x1
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   12....       LCALL   ??osal_nv_write?relay
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    255              }
    256            }
    257          
    258            // Set the MAC PIB extended address according to results from above.
    259            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000135                ; Setup parameters for call to function ZMacSetReq
   \   000135   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000137   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000139   79E2         MOV     R1,#-0x1e
   \   00013B   12....       LCALL   ??ZMacSetReq?relay
    260          }
   \   00013E   7408         MOV     A,#0x8
   \   000140   12....       LCALL   ?DEALLOC_XSTACK8
   \   000143   7F03         MOV     R7,#0x3
   \   000145   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000148   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   00014A                ; Setup parameters for call to function osal_rand
   \   00014A   12....       LCALL   ??osal_rand?relay
   \   00014D   8A..         MOV     ?V0 + 0,R2
   \   00014F   A8..         MOV     R0,?V0 + 0
   \   000151   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000154   E8           MOV     A,R0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   0E           INC     R6
   \   000157   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00015A   EB           MOV     A,R3
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   0E           INC     R6
   \   00015D   EE           MOV     A,R6
   \   00015E   C3           CLR     C
   \   00015F   9406         SUBB    A,#0x6
   \   000161   40E7         JC      ??zmain_ext_addr_4
   \   000163   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000166   7410         MOV     A,#0x10
   \   000168   F0           MOVX    @DPTR,A
   \   000169   7401         MOV     A,#0x1
   \   00016B   2E           ADD     A,R6
   \   00016C   F8           MOV     R0,A
   \   00016D   74..         MOV     A,#aExtendedAddress & 0xff
   \   00016F   28           ADD     A,R0
   \   000170   F582         MOV     DPL,A
   \   000172   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000174   3400         ADDC    A,#0x0
   \   000176   F583         MOV     DPH,A
   \   000178   74F8         MOV     A,#-0x8
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   80B8         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
    261          
    262          #if defined ZCL_KEY_ESTABLISH
    263          /**************************************************************************************************
    264           * @fn          zmain_cert_init
    265           *
    266           * @brief       Initialize the Certicom certificate information.
    267           *
    268           * input parameters
    269           *
    270           * None.
    271           *
    272           * output parameters
    273           *
    274           * None.
    275           *
    276           * @return      None.
    277           **************************************************************************************************
    278           */
    279          static void zmain_cert_init(void)
    280          {
    281            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    282            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    283              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    284              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    285              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    286              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    287              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    288              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    289            };
    290          
    291            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    292            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    293          
    294            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    295            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    296            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    297                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    298                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    299            {
    300              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    301              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    302                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    303              // If the certificate data is not NULL, use it to update the corresponding NV items.
    304              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    305              {
    306                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    307                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    308                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    309                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    310                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    311                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    312                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    313                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    314              }
    315            }
    316          }
    317          #endif
    318          
    319          /**************************************************************************************************
    320           * @fn          zmain_dev_info
    321           *
    322           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    323           *
    324           * input parameters
    325           *
    326           * None.
    327           *
    328           * output parameters
    329           *
    330           * None.
    331           *
    332           * @return      None.
    333           **************************************************************************************************
    334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    335          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    336          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    337          #ifdef LCD_SUPPORTED
    338            uint8 i;
    339            uint8 *xad;
    340            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    341          
    342            // Display the extended address.
    343            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \   00000A   78..         MOV     R0,#(aExtendedAddress + 7) & 0xff
   \   00000C   79..         MOV     R1,#((aExtendedAddress + 7) >> 8) & 0xff
    344          
    345            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7C00         MOV     R4,#0x0
    346            {
    347              uint8 ch;
    348              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C4           SWAP    A
   \   000016   540F         ANL     A,#0xf
   \   000018   FD           MOV     R5,A
    349              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000019   EC           MOV     A,R4
   \   00001A   FE           MOV     R6,A
   \   00001B   0C           INC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   C3           CLR     C
   \   00001E   940A         SUBB    A,#0xa
   \   000020   5004         JNC     ??zmain_dev_info_1
   \   000022   7A30         MOV     R2,#0x30
   \   000024   8002         SJMP    ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   000026   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_2:
   \   000028   EA           MOV     A,R2
   \   000029   2D           ADD     A,R5
   \   00002A   C0E0         PUSH    A
   \   00002C   8E..         MOV     ?V0 + 0,R6
   \   00002E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    350              ch = *xad & 0x0F;
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   540F         ANL     A,#0xf
   \   00003B   FD           MOV     R5,A
    351              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00003C   EC           MOV     A,R4
   \   00003D   FF           MOV     R7,A
   \   00003E   0C           INC     R4
   \   00003F   ED           MOV     A,R5
   \   000040   C3           CLR     C
   \   000041   940A         SUBB    A,#0xa
   \   000043   5004         JNC     ??zmain_dev_info_3
   \   000045   7A30         MOV     R2,#0x30
   \   000047   8002         SJMP    ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   000049   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_4:
   \   00004B   EA           MOV     A,R2
   \   00004C   2D           ADD     A,R5
   \   00004D   C0E0         PUSH    A
   \   00004F   8F..         MOV     ?V0 + 0,R7
   \   000051   12....       LCALL   ?Subroutine1 & 0xFFFF
    352            }
   \                     ??CrossCallReturnLabel_4:
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   E8           MOV     A,R0
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   18           DEC     R0
   \   00005B   E9           MOV     A,R1
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   F9           MOV     R1,A
   \   00005F   EC           MOV     A,R4
   \   000060   C3           CLR     C
   \   000061   9410         SUBB    A,#0x10
   \   000063   40AB         JC      ??zmain_dev_info_0
    353            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    354            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
   \   00006C                ; Setup parameters for call to function HalLcdWriteString
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   7A..         MOV     R2,#`?<Constant "IEEE: ">` & 0xff
   \   000070   7B..         MOV     R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000072   12....       LCALL   ??HalLcdWriteString?relay
    355            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   \   000075                ; Setup parameters for call to function HalLcdWriteString
   \   000075   7902         MOV     R1,#0x2
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   AA82         MOV     R2,DPL
   \   00007F   AB83         MOV     R3,DPH
   \   000081   12....       LCALL   ??HalLcdWriteString?relay
    356          #endif
    357          }
   \   000084   7411         MOV     A,#0x11
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   7F02         MOV     R7,#0x2
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 0
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??myApp_ReadyanwuLevel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    myApp_ReadyanwuLevel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_dev_info?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      
    358          
    359          #ifdef LCD_SUPPORTED
    360          /*********************************************************************
    361           * @fn      zmain_lcd_init
    362           * @brief   Initialize LCD at start up.
    363           * @return  none
    364           *********************************************************************/
    365          static void zmain_lcd_init ( void )
    366          {
    367          #ifdef SERIAL_DEBUG_SUPPORTED
    368            {
    369              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    370          
    371          #if defined( MT_MAC_FUNC )
    372          #if defined( ZDO_COORDINATOR )
    373                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    374          #else
    375                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    376          #endif // ZDO
    377          #elif defined( MT_NWK_FUNC )
    378          #if defined( ZDO_COORDINATOR )
    379                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    380          #else
    381                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    382          #endif // ZDO
    383          #endif // MT_FUNC
    384            }
    385          #endif // SERIAL_DEBUG_SUPPORTED
    386          }
    387          #endif
    388          
    389          /*********************************************************************
    390          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       0      0      0
       -> osal_int_disable      0      0      0
       -> HalAdcCheckVdd        0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> zgInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> zmain_dev_info        0      0      0
       -> HalLcdWriteString     0      0      0
       -> osal_start_system     0      0      0
     myApp_ReadyanwuLevel       2      0      0
     zmain_dev_info             1      0     27
       -> HalLcdWriteString     0      0     54
       -> HalLcdWriteString     0      0     54
     zmain_ext_addr             2      0     23
       -> osal_nv_item_init     0      0     42
       -> osal_nv_read          0      0     46
       -> osal_memcmp           0      0     44
       -> HalFlashRead          0      0     42
       -> osal_memcmp           0      0     44
       -> osal_memcmp           0      0     44
       -> osal_memcpy           0      0     44
       -> osal_nv_write         0      0     46
       -> ZMacSetReq            0      0     38
       -> osal_rand             0      0     38


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0INP                                             1
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     ADCCON1                                           1
     ADCCON3                                           1
     ADCL                                              1
     ADCH                                              1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     APCFG                                             1
     P0DIR                                             1
     P1DIR                                             1
     myApp_ReadyanwuLevel                             68
     main                                            139
     zmain_ext_addr                                  381
     ?Subroutine0                                     15
     zmain_dev_info                                  142
     ?Subroutine1                                     19
     ??myApp_ReadyanwuLevel?relay                      6
     ??main?relay                                      6
     ??zmain_ext_addr?relay                            6
     ??zmain_dev_info?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8
     ?<Constant "IEEE: ">                              7
     ?<Constant "TexasInstruments">                   17

 
 764 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
  13 bytes in segment SFR_AN
  32 bytes in segment XDATA_ROM_C
 
 788 bytes of CODE  memory
  32 bytes of CONST memory
   0 bytes of DATA  memory (+ 13 bytes shared)

Errors: none
Warnings: none
