///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        19/Dec/2018  20:16:47 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \ZMain\TI2530DB\ZMain.c                           /
//    Command line       =  -f C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™ /
//                          ∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wCoord.cfg (-DCPU32MHZ                   /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™ /
//                          ∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x0004                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\XuaNJ\Desktop\±œ… /
//                          Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c    /
//                          -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D          /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          HAL_UART=TRUE -lC C:\Users\XuaNJ\Desktop\±œ…Ë\DHT /
//                          11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5. /
//                          1a\Projects\zstack\Samples\GenericApp\CC2530DB\Co /
//                          ordinatorEB\List\ -lA C:\Users\XuaNJ\Desktop\±œ…Ë /
//                          \DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530- /
//                          2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D /
//                          B\CoordinatorEB\List\ --diag_suppress             /
//                          Pe001,Pa010 -o C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ /
//                          ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Samples\GenericApp\CC2530DB\Coord /
//                          inatorEB\Obj\ -e --no_code_motion --debug         /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\ -I                  /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\Source\ -I        /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI253 /
//                          0DB\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ /
//                          ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\ /
//                          ..\Components\hal\include\ -I                     /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\target\CC2530EB\ -I                     /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\include\ -I C:\Users\XuaNJ\Desktop\±œ…Ë /
//                          \DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530- /
//                          2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\low_level\srf04\ -I                     /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\low_level\srf04\single_chip\ -I         /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mt\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬  /
//                          ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\Components\osal\include\ -I               /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\saddr\ -I                          /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\services\sdata\ -I                          /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\af\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DH /
//                          T11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5 /
//                          .1a\Projects\zstack\Samples\GenericApp\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\nwk\ -I            /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sapi\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\ /
//                          DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\GenericApp\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sec\ -I          /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\stack\sys\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\D /
//                          HT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\zdo\ -I           /
//                          C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\zmac\ -I C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ /
//                          ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Samples\GenericApp\CC2530DB\..\.. /
//                          \..\..\..\Components\zmac\f8w\ -Ohz               /
//                          --require_prototypes                              /
//    List file          =  C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+ /
//                          π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\CoordinatorEB\List\Z /
//                          Main.s51                                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZMain

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??main?relay
        FUNCTION ??main?relay,0203H
        PUBLIC ??myApp_ReadyanwuLevel?relay
        FUNCTION ??myApp_ReadyanwuLevel?relay,0203H
        FUNCTION ??zmain_dev_info?relay,0203H
        FUNCTION ??zmain_ext_addr?relay,0203H
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK APCFG
        PUBWEAK CLKCONCMD
        PUBWEAK CLKCONSTA
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P1DIR
        PUBWEAK SLEEPCMD
        PUBWEAK SLEEPSTA
        PUBWEAK _A_P1
        PUBLIC main
        FUNCTION main,0a1a03H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC myApp_ReadyanwuLevel
        FUNCTION myApp_ReadyanwuLevel,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zmain_dev_info,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        FUNCTION zmain_ext_addr,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 23, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_int_disable    SYMBOL "osal_int_disable"
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
InitBoard           SYMBOL "InitBoard"
HalDriverInit       SYMBOL "HalDriverInit"
osal_nv_init        SYMBOL "osal_nv_init"
ZMacInit            SYMBOL "ZMacInit"
zgInit              SYMBOL "zgInit"
osal_init_system    SYMBOL "osal_init_system"
osal_int_enable     SYMBOL "osal_int_enable"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_start_system   SYMBOL "osal_start_system"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
osal_memcmp         SYMBOL "osal_memcmp"
HalFlashRead        SYMBOL "HalFlashRead"
osal_memcpy         SYMBOL "osal_memcpy"
osal_nv_write       SYMBOL "osal_nv_write"
ZMacSetReq          SYMBOL "ZMacSetReq"
osal_rand           SYMBOL "osal_rand"
??HalAdcCheckVdd?relay SYMBOL "?relay", HalAdcCheckVdd
??HalDriverInit?relay SYMBOL "?relay", HalDriverInit
??HalFlashRead?relay SYMBOL "?relay", HalFlashRead
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??InitBoard?relay   SYMBOL "?relay", InitBoard
??ZMacInit?relay    SYMBOL "?relay", ZMacInit
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??osal_init_system?relay SYMBOL "?relay", osal_init_system
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
??osal_int_enable?relay SYMBOL "?relay", osal_int_enable
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_nv_init?relay SYMBOL "?relay", osal_nv_init
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_system?relay SYMBOL "?relay", osal_start_system
??zgInit?relay      SYMBOL "?relay", zgInit
main                SYMBOL "main"
??main?relay        SYMBOL "?relay", main
myApp_ReadyanwuLevel SYMBOL "myApp_ReadyanwuLevel"
??myApp_ReadyanwuLevel?relay SYMBOL "?relay", myApp_ReadyanwuLevel

        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN InitBoard
        FUNCTION InitBoard,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalDriverInit
        FUNCTION HalDriverInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_init
        FUNCTION osal_nv_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacInit
        FUNCTION ZMacInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInit
        FUNCTION zgInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_init_system
        FUNCTION osal_init_system,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_enable
        FUNCTION osal_int_enable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_system
        FUNCTION osal_start_system,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashRead
        FUNCTION HalFlashRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalAdcCheckVdd?relay
        FUNCTION ??HalAdcCheckVdd?relay,00H
        EXTERN ??HalDriverInit?relay
        FUNCTION ??HalDriverInit?relay,00H
        EXTERN ??HalFlashRead?relay
        FUNCTION ??HalFlashRead?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??InitBoard?relay
        FUNCTION ??InitBoard?relay,00H
        EXTERN ??ZMacInit?relay
        FUNCTION ??ZMacInit?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??osal_init_system?relay
        FUNCTION ??osal_init_system?relay,00H
        EXTERN ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,00H
        EXTERN ??osal_int_enable?relay
        FUNCTION ??osal_int_enable?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_nv_init?relay
        FUNCTION ??osal_nv_init?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_system?relay
        FUNCTION ??osal_start_system?relay,00H
        EXTERN ??zgInit?relay
        FUNCTION ??zgInit?relay,00H
        EXTERN aExtendedAddress

// C:\Users\XuaNJ\Desktop\±œ…Ë\DHT11Œ¬ ™∂»+Õ¡»¿ ™∂»+π‚’’£®’˚¿Ì£©\ZStack-CC2530-2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c
//    1 /**************************************************************************************************
//    2   Filename:       ZMain.c
//    3   Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
//    4   Revision:       $Revision: 23835 $
//    5 
//    6   Description:    Startup and shutdown code for ZStack
//    7   Notes:          This version targets the Chipcon CC2530
//    8 
//    9 
//   10   Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #ifndef NONWK
//   46 #include "AF.h"
//   47 #endif
//   48 #include "hal_adc.h"

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr APCFG
APCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   49 #include "hal_flash.h"
//   50 #include "hal_lcd.h"
//   51 #include "hal_led.h"
//   52 #include "hal_drivers.h"
//   53 #include "OnBoard.h"
//   54 #include "OSAL.h"
//   55 #include "OSAL_Nv.h"
//   56 #include "ZComDef.h"
//   57 #include "ZMAC.h"
//   58 
//   59 /*********************************************************************
//   60  * LOCAL FUNCTIONS
//   61  */
//   62 
//   63 static void zmain_ext_addr( void );
//   64 #if defined ZCL_KEY_ESTABLISH
//   65 static void zmain_cert_init( void );
//   66 #endif
//   67 static void zmain_dev_info( void );
//   68 static void zmain_vdd_check( void );
//   69 
//   70 #ifdef LCD_SUPPORTED
//   71 static void zmain_lcd_init( void );
//   72 #endif
//   73 uint16 myApp_ReadyanwuLevel(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   74 uint16 myApp_ReadyanwuLevel(void)
myApp_ReadyanwuLevel:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function myApp_ReadyanwuLevel
        CODE
//   75 {
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   76     uint16 reading = 0;
//   77  P0DIR&=~(1<<7);
        ANL     0xfd,#0x7f
//   78  APCFG|=1<<7;//P07  ADCø™∆Ù
        ORL     0xf2,#0x80
//   79   /* Enable channel */
//   80    ADCCON3=0X07;
        MOV     0xb6,#0x7
//   81   /* writing to this register starts the extra conversion */
//   82   ADCCON3 = 0xb0;//12bitæ´∂»
        MOV     0xb6,#-0x50
//   83   
//   84   /* Wait for the conversion to be done */
//   85   while (!(ADCCON1 & 0x80));
??myApp_ReadyanwuLevel_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??myApp_ReadyanwuLevel_0
//   86   
//   87   /* Disable channel after done conversion */
//   88  // ADCCFG &= (0x02 ^ 0xFF);
//   89   
//   90   /* Read the result */
//   91   reading =  ADCL >> 4;                //ADCL ºƒ¥Ê∆˜µÕ 2 ŒªŒﬁ–ß 
        MOV     A,0xba
//   92   reading |= (((UINT16)ADCH) << 4);
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
        MOV     ?V0 + 0,0xbb
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,R2
        ORL     A,?V0 + 0
        MOV     R2,A
        MOV     A,?V0 + 1
        MOV     R3,A
//   93   if(reading&0x800)//»Áπ˚ «1£¨±Ì æ «∏∫ ˝£¨ «≤π¬Î£¨–Ë“™»°∑¥
        ANL     A,#0x8
        JZ      ??myApp_ReadyanwuLevel_1
//   94   reading=0xfff- reading;
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,#0xf
        SUBB    A,R3
        MOV     R3,A
//   95   return ( reading);
??myApp_ReadyanwuLevel_1:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-4
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE P0DIR
        REQUIRE APCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//   96 }
//   97 
//   98 /*********************************************************************
//   99  * @fn      main
//  100  * @brief   First function called after startup.
//  101  * @return  don't care
//  102  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  103 int main( void )
main:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function main
        CODE
//  104 {
        FUNCALL main, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, InitBoard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalDriverInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_nv_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, ZMacInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zmain_ext_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zgInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_init_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_int_enable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, InitBoard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zmain_dev_info
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, osal_start_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Auto size: 0
//  105   // Turn off interrupts
//  106   osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   ??osal_int_disable?relay
//  107 
//  108   // Initialization for board related stuff such as LEDs
//  109   HAL_BOARD_INIT();
        ANL     0xbe,#0xfb
??main_0:
        MOV     A,0x9d
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_0
        NOP
        MOV     R0,#-0x8
        MOV     R1,#0x1
??main_1:
        NOP
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??main_1
        MOV     0xc6,#0x0
??main_2:
        MOV     A,0x9e
        JNZ     ??main_2
        ORL     0xbe,#0x4
        MOV     DPTR,#0x6270
        MOV     A,#0x8
        MOVX    @DPTR,A
        CLR     0x90.0
        ORL     0xfe,#0x1
        CLR     0x90.1
        ORL     0xfe,#0x2
        CLR     0x90.4
        ORL     0xfe,#0x10
        ORL     0x8f,#0x1
//  110 
//  111   // Make sure supply voltage is high enough to run
//  112   zmain_vdd_check();
        MOV     R6,#0x10
??main_3:
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4a
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??main_3
        DEC     R6
        MOV     A,R6
        JNZ     ??main_3
//  113 
//  114   // Initialize board I/O
//  115   InitBoard( OB_COLD );
        ; Setup parameters for call to function InitBoard
        MOV     R1,#0x0
        LCALL   ??InitBoard?relay
//  116 
//  117   // Initialze HAL drivers
//  118   HalDriverInit();
        ; Setup parameters for call to function HalDriverInit
        LCALL   ??HalDriverInit?relay
//  119 
//  120   // Initialize NV System
//  121   osal_nv_init( NULL );
        ; Setup parameters for call to function osal_nv_init
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??osal_nv_init?relay
//  122 
//  123   // Initialize the MAC
//  124   ZMacInit();
        ; Setup parameters for call to function ZMacInit
        LCALL   ??ZMacInit?relay
//  125 
//  126   // Determine the extended address
//  127   zmain_ext_addr();
        ; Setup parameters for call to function zmain_ext_addr
        LCALL   ??zmain_ext_addr?relay
//  128 
//  129 #if defined ZCL_KEY_ESTABLISH
//  130   // Initialize the Certicom certificate information.
//  131   zmain_cert_init();
//  132 #endif
//  133 
//  134   // Initialize basic NV items
//  135   zgInit();
        ; Setup parameters for call to function zgInit
        LCALL   ??zgInit?relay
//  136 
//  137 #ifndef NONWK
//  138   // Since the AF isn't a task, call it's initialization routine
//  139   afInit();
//  140 #endif
//  141 
//  142   // Initialize the operating system
//  143   osal_init_system();
        ; Setup parameters for call to function osal_init_system
        LCALL   ??osal_init_system?relay
//  144 
//  145   // Allow interrupts
//  146   osal_int_enable( INTS_ALL );
        ; Setup parameters for call to function osal_int_enable
        MOV     R1,#-0x1
        LCALL   ??osal_int_enable?relay
//  147 
//  148   // Final board initialization
//  149   InitBoard( OB_READY );
        ; Setup parameters for call to function InitBoard
        MOV     R1,#0x2
        LCALL   ??InitBoard?relay
//  150 
//  151   // Display information about this device
//  152   zmain_dev_info();
        ; Setup parameters for call to function zmain_dev_info
        LCALL   ??zmain_dev_info?relay
//  153 
//  154   /* Display the device info on the LCD */
//  155 #ifdef LCD_SUPPORTED
//  156   zmain_lcd_init();
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "TexasInstruments">` & 0xff
        MOV     R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  157 #endif
//  158 
//  159 #ifdef WDT_IN_PM1
//  160   /* If WDT is used, this is a good place to enable it. */
//  161   WatchDogEnable( WDTIMX );
//  162 #endif
//  163 
//  164   osal_start_system(); // No Return from here
        ; Setup parameters for call to function osal_start_system
        LCALL   ??osal_start_system?relay
//  165 
//  166   return 0;  // Shouldn't get here.
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE SLEEPCMD
        REQUIRE SLEEPSTA
        REQUIRE CLKCONCMD
        REQUIRE CLKCONSTA
        REQUIRE _A_P1
        REQUIRE P1DIR
        REQUIRE P0INP
//  167 } // main()
//  168 
//  169 /*********************************************************************
//  170  * @fn      zmain_vdd_check
//  171  * @brief   Check if the Vdd is OK to run the processor.
//  172  * @return  Return if Vdd is ok; otherwise, flash LED, then reset
//  173  *********************************************************************/
//  174 static void zmain_vdd_check( void )
//  175 {
//  176   uint8 cnt = 16;
//  177   
//  178   do {
//  179     while (!HalAdcCheckVdd(VDD_MIN_RUN));
//  180   } while (--cnt);
//  181 }
//  182 
//  183 /**************************************************************************************************
//  184  * @fn          zmain_ext_addr
//  185  *
//  186  * @brief       Execute a prioritized search for a valid extended address and write the results
//  187  *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
//  188  *
//  189  * input parameters
//  190  *
//  191  * None.
//  192  *
//  193  * output parameters
//  194  *
//  195  * None.
//  196  *
//  197  * @return      None.
//  198  **************************************************************************************************
//  199  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  200 static void zmain_ext_addr(void)
zmain_ext_addr:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function zmain_ext_addr
        CODE
//  201 {
        FUNCALL zmain_ext_addr, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_ext_addr, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  202   uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  203   uint8 writeNV = TRUE;
//  204 
//  205   // First check whether a non-erased extended address exists in the OSAL NV.
//  206   if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
//  207       (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
//  208       (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??zmain_ext_addr_0
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#aExtendedAddress & 0xff
        MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??zmain_ext_addr_0
        ; Setup parameters for call to function osal_memcmp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#aExtendedAddress & 0xff
        MOV     R2,#(aExtendedAddress >> 8) & 0xff
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zmain_ext_addr_1 & 0xFFFF
//  209   {
//  210     // Attempt to read the extended address from the location on the lock bits page
//  211     // where the programming tools know to reserve it.
//  212     HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
??zmain_ext_addr_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#aExtendedAddress & 0xff
        MOV     R5,#(aExtendedAddress >> 8) & 0xff
        MOV     R2,#-0x18
        MOV     R3,#0x7
        MOV     R1,#0x7f
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  213 
//  214     if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#aExtendedAddress & 0xff
        MOV     R2,#(aExtendedAddress >> 8) & 0xff
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JZ      ??zmain_ext_addr_2
//  215     {
//  216       // Attempt to read the extended address from the designated location in the Info Page.
//  217       if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0xc
        MOV     R2,#0x78
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??zmain_ext_addr_3
//  218       {
//  219         osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#0xc
        MOV     ?V0 + 1,#0x78
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  220       }
//  221       else  // No valid extended address was found.
//  222       {
//  223         uint8 idx;
//  224         
//  225 #if !defined ( NV_RESTORE )
//  226         writeNV = FALSE;  // Make this a temporary IEEE address
//  227 #endif
//  228 
//  229         /* Attempt to create a sufficiently random extended address for expediency.
//  230          * Note: this is only valid/legal in a test environment and
//  231          *       must never be used for a commercial product.
//  232          */
//  233         for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
//  234         {
//  235           uint16 randy = osal_rand();
//  236           aExtendedAddress[idx++] = LO_UINT16(randy);
//  237           aExtendedAddress[idx++] = HI_UINT16(randy);
//  238         }
//  239         // Next-to-MSB identifies ZigBee devicetype.
//  240 #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
//  241         aExtendedAddress[idx++] = 0x10;
//  242 #elif ZG_BUILD_RTRONLY_TYPE
//  243         aExtendedAddress[idx++] = 0x20;
//  244 #else
//  245         aExtendedAddress[idx++] = 0x30;
//  246 #endif
//  247         // MSB has historical signficance.
//  248         aExtendedAddress[idx] = 0xF8;
//  249       }
//  250     }
//  251 
//  252     if (writeNV)
//  253     {
//  254       (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
??zmain_ext_addr_2:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#aExtendedAddress & 0xff
        MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  255     }
//  256   }
//  257 
//  258   // Set the MAC PIB extended address according to results from above.
//  259   (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
??zmain_ext_addr_1:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        MOV     R1,#-0x1e
        LCALL   ??ZMacSetReq?relay
//  260 }
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 19)
??zmain_ext_addr_3:
        MOV     R6,#0x0
??zmain_ext_addr_4:
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     R6
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,R3
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6
        JC      ??zmain_ext_addr_4
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0x10
        MOVX    @DPTR,A
        MOV     A,#0x1
        ADD     A,R6
        MOV     R0,A
        MOV     A,#aExtendedAddress & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(aExtendedAddress >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x8
        MOVX    @DPTR,A
        SJMP    ??zmain_ext_addr_1
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     ?V0 + 0,R6
        MOV     A,#aExtendedAddress & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(aExtendedAddress >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  261 
//  262 #if defined ZCL_KEY_ESTABLISH
//  263 /**************************************************************************************************
//  264  * @fn          zmain_cert_init
//  265  *
//  266  * @brief       Initialize the Certicom certificate information.
//  267  *
//  268  * input parameters
//  269  *
//  270  * None.
//  271  *
//  272  * output parameters
//  273  *
//  274  * None.
//  275  *
//  276  * @return      None.
//  277  **************************************************************************************************
//  278  */
//  279 static void zmain_cert_init(void)
//  280 {
//  281   uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
//  282   uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
//  283     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  284     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  285     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  286     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  287     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
//  288     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
//  289   };
//  290 
//  291   (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
//  292   (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
//  293 
//  294   // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
//  295   // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
//  296   if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
//  297       (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
//  298       (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
//  299   {
//  300     // Attempt to read the certificate data from its corresponding location on the lock bits page.
//  301     HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
//  302                                          ZCL_KE_CA_PUBLIC_KEY_LEN);
//  303     // If the certificate data is not NULL, use it to update the corresponding NV items.
//  304     if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
//  305     {
//  306       (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
//  307       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
//  308                                            ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
//  309       (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
//  310                           ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
//  311       HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
//  312                                         ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
//  313       (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
//  314     }
//  315   }
//  316 }
//  317 #endif
//  318 
//  319 /**************************************************************************************************
//  320  * @fn          zmain_dev_info
//  321  *
//  322  * @brief       This displays the IEEE (MSB to LSB) on the LCD.
//  323  *
//  324  * input parameters
//  325  *
//  326  * None.
//  327  *
//  328  * output parameters
//  329  *
//  330  * None.
//  331  *
//  332  * @return      None.
//  333  **************************************************************************************************
//  334  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  335 static void zmain_dev_info(void)
zmain_dev_info:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function zmain_dev_info
        CODE
//  336 {
        FUNCALL zmain_dev_info, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zmain_dev_info, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  337 #ifdef LCD_SUPPORTED
//  338   uint8 i;
//  339   uint8 *xad;
//  340   uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
//  341 
//  342   // Display the extended address.
//  343   xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
        MOV     R0,#(aExtendedAddress + 7) & 0xff
        MOV     R1,#((aExtendedAddress + 7) >> 8) & 0xff
//  344 
//  345   for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
        MOV     R4,#0x0
//  346   {
//  347     uint8 ch;
//  348     ch = (*xad >> 4) & 0x0F;
??zmain_dev_info_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R5,A
//  349     lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
        MOV     A,R4
        MOV     R6,A
        INC     R4
        MOV     A,R5
        CLR     C
        SUBB    A,#0xa
        JNC     ??zmain_dev_info_1
        MOV     R2,#0x30
        SJMP    ??zmain_dev_info_2
??zmain_dev_info_1:
        MOV     R2,#0x37
??zmain_dev_info_2:
        MOV     A,R2
        ADD     A,R5
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 0,R6
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  350     ch = *xad & 0x0F;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R5,A
//  351     lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
        MOV     A,R4
        MOV     R7,A
        INC     R4
        MOV     A,R5
        CLR     C
        SUBB    A,#0xa
        JNC     ??zmain_dev_info_3
        MOV     R2,#0x30
        SJMP    ??zmain_dev_info_4
??zmain_dev_info_3:
        MOV     R2,#0x37
??zmain_dev_info_4:
        MOV     A,R2
        ADD     A,R5
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 0,R7
        LCALL   ?Subroutine1 & 0xFFFF
//  352   }
??CrossCallReturnLabel_4:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,#0x10
        JC      ??zmain_dev_info_0
//  353   lcd_buf[Z_EXTADDR_LEN*2] = '\0';
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  354   HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "IEEE: ">` & 0xff
        MOV     R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  355   HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  356 #endif
//  357 }
        MOV     A,#0x11
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+-1
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??myApp_ReadyanwuLevel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    myApp_ReadyanwuLevel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??main?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    main

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zmain_ext_addr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zmain_ext_addr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zmain_dev_info?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zmain_dev_info

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "IEEE: ">`:
        DB "IEEE: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TexasInstruments">`:
        DB "TexasInstruments"

        END
//  358 
//  359 #ifdef LCD_SUPPORTED
//  360 /*********************************************************************
//  361  * @fn      zmain_lcd_init
//  362  * @brief   Initialize LCD at start up.
//  363  * @return  none
//  364  *********************************************************************/
//  365 static void zmain_lcd_init ( void )
//  366 {
//  367 #ifdef SERIAL_DEBUG_SUPPORTED
//  368   {
//  369     HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
//  370 
//  371 #if defined( MT_MAC_FUNC )
//  372 #if defined( ZDO_COORDINATOR )
//  373       HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
//  374 #else
//  375       HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
//  376 #endif // ZDO
//  377 #elif defined( MT_NWK_FUNC )
//  378 #if defined( ZDO_COORDINATOR )
//  379       HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
//  380 #else
//  381       HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
//  382 #endif // ZDO
//  383 #endif // MT_FUNC
//  384   }
//  385 #endif // SERIAL_DEBUG_SUPPORTED
//  386 }
//  387 #endif
//  388 
//  389 /*********************************************************************
//  390 *********************************************************************/
// 
// 764 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//  13 bytes in segment SFR_AN
//  32 bytes in segment XDATA_ROM_C
// 
// 788 bytes of CODE  memory
//  32 bytes of CONST memory
//   0 bytes of DATA  memory (+ 13 bytes shared)
//
//Errors: none
//Warnings: none
