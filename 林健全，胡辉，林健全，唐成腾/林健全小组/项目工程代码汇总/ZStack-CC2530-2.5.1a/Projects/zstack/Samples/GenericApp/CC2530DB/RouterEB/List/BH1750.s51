///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        25/Dec/2016  21:00:03 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z /
//                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp _IR\Source\BH1750.c             /
//    Command line       =  -f "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7 /
//                          .9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zsta /
//                          ck\Samples\GenericApp _IR\CC2530DB\..\..\..\Tools /
//                          \CC2530DB\f8wRouter.cfg" (-DCPU32MHZ              /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x0004                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ /
//                          ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                     /
//                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \GenericApp _IR\Source\BH1750.c" -D ZTOOL_P1 -D   /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\RouterEB\List\"   /
//                          -lA "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ /
//                          7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\Samples\GenericApp _IR\CC2530DB\RouterEB\List /
//                          \" --diag_suppress Pe001,Pa010 -o                 /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\RouterEB\Obj\"    /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\" -I              /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\..\Source\" -I    /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\..\..\..\ZMain\TI /
//                          2530DB\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee /
//                          ¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Proj /
//                          ects\zstack\Samples\GenericApp                    /
//                          _IR\CC2530DB\..\..\..\..\..\Components\hal\includ /
//                          e\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì /
//                          ×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\GenericApp                         /
//                          _IR\CC2530DB\..\..\..\..\..\Components\hal\target /
//                          \CC2530EB\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700Zig /
//                          Bee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Samples\GenericApp                 /
//                          _IR\CC2530DB\..\..\..\..\..\Components\mac\includ /
//                          e\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì /
//                          ×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\GenericApp                         /
//                          _IR\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª /
//                          ·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp                      /
//                          _IR\CC2530DB\..\..\..\..\..\Components\mac\low_le /
//                          vel\srf04\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700Zig /
//                          Bee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Samples\GenericApp                 /
//                          _IR\CC2530DB\..\..\..\..\..\Components\mac\low_le /
//                          vel\srf04\single_chip\" -I                        /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\..\..\..\..\..\Co /
//                          mponents\mt\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700Z /
//                          igBee¿ª·¢Ì×¼þ7.9\Zigbee                           /
//                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \GenericApp _IR\CC2530DB\..\..\..\..\..\Component /
//                          s\osal\include\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\7 /
//                          00ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                        /
//                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \GenericApp _IR\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥ /
//                          \700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                      /
//                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \GenericApp _IR\CC2530DB\..\..\..\..\..\Component /
//                          s\services\sdata\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥ /
//                          \700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                      /
//                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \GenericApp _IR\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700Zi /
//                          gBee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Samples\GenericApp                /
//                          _IR\CC2530DB\..\..\..\..\..\Components\stack\nwk\ /
//                          " -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼ /
//                          þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\Samples\GenericApp                           /
//                          _IR\CC2530DB\..\..\..\..\..\Components\stack\sapi /
//                          \" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì× /
//                          ¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\z /
//                          stack\Samples\GenericApp                          /
//                          _IR\CC2530DB\..\..\..\..\..\Components\stack\sec\ /
//                          " -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼ /
//                          þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\Samples\GenericApp                           /
//                          _IR\CC2530DB\..\..\..\..\..\Components\stack\sys\ /
//                          " -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼ /
//                          þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\Samples\GenericApp                           /
//                          _IR\CC2530DB\..\..\..\..\..\Components\stack\zdo\ /
//                          " -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼ /
//                          þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\Samples\GenericApp                           /
//                          _IR\CC2530DB\..\..\..\..\..\Components\zmac\" -I  /
//                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\ /
//                          Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp _IR\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\" -Ohz --require_prototypes     /
//    List file          =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z /
//                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp _IR\CC2530DB\RouterEB\List\BH17 /
//                          50.s51                                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME BH1750

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?FLT_DIV
        EXTERN ?FLT_GE
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BH1750_SendACK?relay
        FUNCTION ??BH1750_SendACK?relay,0203H
        PUBLIC ??BH1750_SendNCK?relay
        FUNCTION ??BH1750_SendNCK?relay,0203H
        PUBLIC ??Delay_10us?relay
        FUNCTION ??Delay_10us?relay,0203H
        PUBLIC ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,0203H
        PUBLIC ??Delay_us?relay
        FUNCTION ??Delay_us?relay,0203H
        PUBLIC ??IRcvStrExt?relay
        FUNCTION ??IRcvStrExt?relay,0203H
        PUBLIC ??ISendByte?relay
        FUNCTION ??ISendByte?relay,0203H
        PUBLIC ??Init_BH1750?relay
        FUNCTION ??Init_BH1750?relay,0203H
        PUBLIC ??RcvByte?relay
        FUNCTION ??RcvByte?relay,0203H
        PUBLIC ??SendByte?relay
        FUNCTION ??SendByte?relay,0203H
        PUBLIC ??Start_I2c?relay
        FUNCTION ??Start_I2c?relay,0203H
        PUBLIC ??Stop_I2c?relay
        FUNCTION ??Stop_I2c?relay,0203H
        PUBLIC ??get_light?relay
        FUNCTION ??get_light?relay,0203H
        PUBLIC BH1750_SendACK
        FUNCTION BH1750_SendACK,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC BH1750_SendNCK
        FUNCTION BH1750_SendNCK,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Delay_10us
        FUNCTION Delay_10us,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Delay_ms
        FUNCTION Delay_ms,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay_us
        FUNCTION Delay_us,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC IRcvStrExt
        FUNCTION IRcvStrExt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ISendByte
        FUNCTION ISendByte,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Init_BH1750
        FUNCTION Init_BH1750,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P0DIR
        PUBLIC RcvByte
        FUNCTION RcvByte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SendByte
        FUNCTION SendByte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Start_I2c
        FUNCTION Start_I2c,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Stop_I2c
        FUNCTION Stop_I2c,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_P0
        PUBWEAK __Constant_3f99999a
        PUBWEAK __Constant_461c3c00
        PUBWEAK __Constant_461c4000
        PUBLIC ack
        PUBLIC buf
        PUBLIC get_light
        FUNCTION get_light,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
BH1750_SendACK      SYMBOL "BH1750_SendACK"
??BH1750_SendACK?relay SYMBOL "?relay", BH1750_SendACK
BH1750_SendNCK      SYMBOL "BH1750_SendNCK"
??BH1750_SendNCK?relay SYMBOL "?relay", BH1750_SendNCK
Delay_10us          SYMBOL "Delay_10us"
??Delay_10us?relay  SYMBOL "?relay", Delay_10us
Delay_ms            SYMBOL "Delay_ms"
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
Delay_us            SYMBOL "Delay_us"
??Delay_us?relay    SYMBOL "?relay", Delay_us
IRcvStrExt          SYMBOL "IRcvStrExt"
??IRcvStrExt?relay  SYMBOL "?relay", IRcvStrExt
ISendByte           SYMBOL "ISendByte"
??ISendByte?relay   SYMBOL "?relay", ISendByte
Init_BH1750         SYMBOL "Init_BH1750"
??Init_BH1750?relay SYMBOL "?relay", Init_BH1750
RcvByte             SYMBOL "RcvByte"
??RcvByte?relay     SYMBOL "?relay", RcvByte
SendByte            SYMBOL "SendByte"
??SendByte?relay    SYMBOL "?relay", SendByte
Start_I2c           SYMBOL "Start_I2c"
??Start_I2c?relay   SYMBOL "?relay", Start_I2c
Stop_I2c            SYMBOL "Stop_I2c"
??Stop_I2c?relay    SYMBOL "?relay", Stop_I2c
get_light           SYMBOL "get_light"
??get_light?relay   SYMBOL "?relay", get_light

        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H

// F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp _IR\Source\BH1750.c
//    1 #include <stdio.h>
//    2 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    3 #include "BH1750.h"
//    4 #include "OnBoard.h"
//    5 
//    6 #define DPOWR  0X00         //¶Ïµç
//    7 #define POWER  0X01         //SHANG DIAN
//    8 #define RESET    0X07         //CHONG ZHI
//    9 #define CHMODE  0X10        //Á¬ÐøH·Ö±æÂÊ
//   10 #define CHMODE2 0X11         //Á¬ÐøH·Ö±æÂÊ2
//   11 #define CLMODE   0X13           //Á¬ÐøµÍ·Ö±æ
//   12 #define H1MODE   0X20           //Ò»´ÎH·Ö±æÂÊ
//   13 #define H1MODE2    0X21          //Ò»´ÎH·Ö±æÂÊ2
//   14 #define L1MODE    0X23           //Ò»´ÎL·Ö±æÂÊÄ£Ê½
//   15 #define  SCL P0_0      //IICÊ±ÖÓÒý½Å¶¨Òå
//   16 #define  SDA P0_1     //IICÊý¾ÝÒý½Å¶¨Òå
//   17 #define	 SlaveAddress   0x46 //¶¨ÒåÆ÷¼þÔÚIIC×ÜÏßÖÐµÄ´ÓµØÖ·,¸ù¾ÝALT  ADDRESSµØÖ·Òý½Å²»Í¬ÐÞ¸Ä
//   18                               //ALT  ADDRESSÒý½Å½ÓµØÊ±µØÖ·Îª0xA6£¬½ÓµçÔ´Ê±µØÖ·Îª0x3A
//   19 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   20 uchar ack;
ack:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 uchar buf[8];                         //½ÓÊÕÊý¾Ý»º´æÇø  
buf:
        DS 8
        REQUIRE __INIT_XDATA_Z
//   22 //uint sun;
//   23 //uchar lx[5];//ge,shi,bai,qian,wan;            //ÏÔÊ¾±äÁ¿
//   24 //float s;
//   25 
//   26  
//   27 
//   28 
//   29 
//   30  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   31 void Delay_us(unsigned char n)
Delay_us:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_us
        CODE
//   32  {        
        FUNCALL Delay_us, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//   33   MicroWait(n);   
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        CFI EndBlock cfiBlock0
//   34  }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   35  void Delay_10us(void) //10 usÑÓÊ±
Delay_10us:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Delay_10us
        CODE
//   36 {
        FUNCALL Delay_10us, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   37    MicroWait(10);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock2
//   38 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   39 void Delay_ms(int Time)//n )
Delay_ms:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Delay_ms
        CODE
//   40  {
        FUNCALL Delay_ms, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   41    unsigned char i;
//   42   while(Time--)
??Delay_ms_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??Delay_ms_1
//   43   {
//   44     for(i=0;i<100;i++)
        MOV     ?V0 + 0,#0x64
//   45      Delay_10us();
??Delay_ms_2:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JZ      ??Delay_ms_0
        SJMP    ??Delay_ms_2
        CFI EndBlock cfiBlock3
//   46   }
//   47  }
??Delay_ms_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//   48  
//   49 //*********************************************************
//   50 
//   51 /**************************************
//   52 ÆðÊ¼ÐÅºÅ
//   53 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   54 void Start_I2c(void)
Start_I2c:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function Start_I2c
        CODE
//   55 {
        FUNCALL Start_I2c, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Start_I2c, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   56     P0DIR|=0x03;//P00 P01
        LCALL   ?Subroutine3 & 0xFFFF
//   57     
//   58     SDA = 1;                    //À­¸ßÊý¾ÝÏß
//   59     SCL = 1;                    //À­¸ßÊ±ÖÓÏß
//   60     Delay_us(5);                 //ÑÓÊ±
//   61     SDA = 0;                    //²úÉúÏÂ½µÑØ
??CrossCallReturnLabel_0:
        CLR     0x80.1
//   62     Delay_us(5);                 //ÑÓÊ±
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   63     SCL = 0;                    //À­µÍÊ±ÖÓÏß
        CLR     0x80.0
//   64 }
        SJMP    ??Subroutine7_0
        CFI EndBlock cfiBlock5
        REQUIRE P0DIR
        REQUIRE _A_P0
//   65 
//   66 
//   67 /**************************************
//   68 Í£Ö¹ÐÅºÅ
//   69 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 void  Stop_I2c(void)
Stop_I2c:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function Stop_I2c
        CODE
//   71 {
        FUNCALL Stop_I2c, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Stop_I2c, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   72     P0DIR|=0x03;//P00 P01
        LCALL   ?Subroutine4 & 0xFFFF
//   73     SDA = 0;                    //À­µÍÊý¾ÝÏß
//   74     SCL = 1;                    //À­¸ßÊ±ÖÓÏß
//   75     Delay_us(5);               //ÑÓÊ±
//   76     SDA = 1;                    //²úÉúÉÏÉýÑØ
??CrossCallReturnLabel_2:
        SETB    0x80.1
//   77     Delay_us(5);                //ÑÓÊ±
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
        REQUIRE P0DIR
        REQUIRE _A_P0
//   78 }
//   79 
//   80 /**************************************
//   81 ·¢ËÍÓ¦´ðÐÅºÅ
//   82 Èë¿Ú²ÎÊý:ack (0:ACK 1:NAK)
//   83 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 void BH1750_SendACK(void)
BH1750_SendACK:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function BH1750_SendACK
        CODE
//   85 {
        FUNCALL BH1750_SendACK, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   86     P0DIR|=0x03;//P00 P01
        LCALL   ?Subroutine4 & 0xFFFF
//   87     SDA = 0;                  //Ð´Ó¦´ðÐÅºÅ
//   88     SCL = 1;                    //À­¸ßÊ±ÖÓÏß
//   89     Delay_us(5);                //ÑÓÊ±
//   90     SCL = 0;                    //À­µÍÊ±ÖÓÏß
??CrossCallReturnLabel_3:
        CLR     0x80.0
//   91     SDA = 1;  
        SETB    0x80.1
//   92 }
        SJMP    ??Subroutine7_0
        CFI EndBlock cfiBlock7
        REQUIRE P0DIR
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        ORL     0xfd,#0x3
        CLR     0x80.1
        SETB    0x80.0
        ; Setup parameters for call to function Onboard_wait
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        CFI EndBlock cfiBlock11
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//   93 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   94 void BH1750_SendNCK(void)
BH1750_SendNCK:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function BH1750_SendNCK
        CODE
//   95 {
        FUNCALL BH1750_SendNCK, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   96    P0DIR|=0x03;//P00 P01
        LCALL   ?Subroutine3 & 0xFFFF
//   97     SDA = 1;                  //Ð´Ó¦´ðÐÅºÅ
//   98     SCL = 1;                    //À­¸ßÊ±ÖÓÏß
//   99     Delay_us(5);                //ÑÓÊ±
//  100     SCL = 0;                    //À­µÍÊ±ÖÓÏß
??CrossCallReturnLabel_1:
        CLR     0x80.0
//  101     SDA = 0; 
        CLR     0x80.1
//  102 }
        SJMP    ??Subroutine7_0
        CFI EndBlock cfiBlock13
        REQUIRE P0DIR
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        ORL     0xfd,#0x3
        SETB    0x80.1
        SETB    0x80.0
        ; Setup parameters for call to function Onboard_wait
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  103 
//  104 /*----------------------------------------------------------------              
//  105 I2CÐ´ÈëÒ»¸ö8Î»¶þ½øÖÆÊý£¬¸ßÎ»ÔÚÇ°µÍÎ»ÔÚºó
//  106 ------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 void  SendByte(unsigned char c)
SendByte:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function SendByte
        CODE
//  108 {
        FUNCALL SendByte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendByte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendByte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  109  unsigned char BitCnt;
//  110  P0DIR|=0x03;//P00 P01
        ORL     0xfd,#0x3
//  111  for(BitCnt=0;BitCnt<8;BitCnt++)  //Òª´«ËÍµÄÊý¾Ý³¤¶ÈÎª8Î»
        MOV     R6,#0x0
//  112     {
//  113      
//  114       if((c<<BitCnt)&0x80) SDA=1;   //ÅÐ¶Ï·¢ËÍÎ»
??SendByte_0:
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ANL     A,#0x80
        JZ      ??SendByte_1
        SETB    0x80.1
        SJMP    ??SendByte_2
//  115        else  SDA=0;                
??SendByte_1:
        CLR     0x80.1
//  116      SCL=1;               //ÖÃÊ±ÖÓÏßÎª¸ß£¬Í¨Öª±»¿ØÆ÷¿ªÊ¼½ÓÊÕÊý¾ÝÎ»
??SendByte_2:
        SETB    0x80.0
//  117      Delay_us(5);         //±£Ö¤Ê±ÖÓ¸ßµçÆ½ÖÜÆÚ´óÓÚ4¦Ì      
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  118      SCL=0; 
        CLR     0x80.0
//  119     }  
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??SendByte_0
//  120      SDA=1;
        SETB    0x80.1
//  121     Delay_us(5);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  122     P0DIR&=~(1<<1);          //8Î»·¢ËÍÍêºóÊÍ·ÅÊý¾ÝÏß£¬×¼±¸½ÓÊÕÓ¦´ðÎ»
        ANL     0xfd,#0xfd
//  123     SCL=1;
        SETB    0x80.0
//  124     Delay_us(5);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  125     if(SDA==1)ack=0;     
//  126        else ack=1;        //ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½Ó¦´ðÐÅºÅ£¬¡°1¡±£ºÃ»ÓÐ
        MOV     C,0x80.1
        JC      ??SendByte_3
        SETB    B.0
        SJMP    ??SendByte_4
??SendByte_3:
        CLR     B.0
??SendByte_4:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     DPTR,#ack
        MOVX    @DPTR,A
//  127     SCL=0;
        CLR     0x80.0
//  128 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock17
        REQUIRE P0DIR
        REQUIRE _A_P0
//  129 
//  130 
//  131 /*******************************************************************
//  132                  ÏòÎÞ×ÓµØÖ·Æ÷¼þ·¢ËÍ×Ö½ÚÊý¾Ýº¯Êý               
//  133 º¯ÊýÔ­ÐÍ: bit  ISendByte(uchar sla,ucahr c);  
//  134 ¹¦ÄÜ:     ´ÓÆô¶¯×ÜÏßµ½·¢ËÍµØÖ·£¬Êý¾Ý£¬½áÊø×ÜÏßµÄÈ«¹ý³Ì,´ÓÆ÷¼þµØÖ·sla.
//  135           Èç¹û·µ»Ø1±íÊ¾²Ù×÷³É¹¦£¬·ñÔò²Ù×÷ÓÐÎó¡£
//  136 ×¢Òâ£º    Ê¹ÓÃÇ°±ØÐëÒÑ½áÊø×ÜÏß¡£
//  137 ********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  138 uchar ISendByte(uchar sla,uchar c)
ISendByte:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function ISendByte
        CODE
//  139 {
        FUNCALL ISendByte, Start_I2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ISendByte, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ISendByte, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ISendByte, Stop_I2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  140    Start_I2c();               /*Æô¶¯×ÜÏß*/
        ; Setup parameters for call to function Start_I2c
        LCALL   ??Start_I2c?relay
//  141    SendByte(sla);             /*·¢ËÍÆ÷¼þµØÖ·*/
        ; Setup parameters for call to function SendByte
        MOV     A,R7
        LCALL   ?Subroutine5 & 0xFFFF
//  142    if(ack==0)return(0);
??CrossCallReturnLabel_4:
        JNZ     ??ISendByte_0
??ISendByte_1:
        MOV     R1,#0x0
        SJMP    ??ISendByte_2
//  143    SendByte(c);               /*·¢ËÍÊý¾Ý*/
??ISendByte_0:
        ; Setup parameters for call to function SendByte
        MOV     A,R6
        LCALL   ?Subroutine5 & 0xFFFF
//  144    if(ack==0)return(0);
??CrossCallReturnLabel_5:
        JZ      ??ISendByte_1
//  145    Stop_I2c();                /*½áÊø×ÜÏß*/ 
        ; Setup parameters for call to function Stop_I2c
        LCALL   ??Stop_I2c?relay
//  146    return(1);
        MOV     R1,#0x1
??ISendByte_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock18
//  147 }
//  148 
//  149 /*******************************************************************
//  150 I2C¶ÁÈ¡Ò»¸ö8Î»¶þ½øÖÆÊý£¬Ò²ÊÇ¸ßÎ»ÔÚÇ°µÍÎ»ÔÚºó  
//  151 ****************************************************************/	

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 uchar RcvByte(void)
RcvByte:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function RcvByte
        CODE
//  153 {
        FUNCALL RcvByte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RcvByte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  154   unsigned char retc;
//  155   unsigned char BitCnt;
//  156    retc=0; 
        MOV     R6,#0x0
//  157    P0DIR&=~(1<<1);         //ÖÃÊý¾ÝÏßÎªÊäÈë·½Ê½
        ANL     0xfd,#0xfd
//  158   for(BitCnt=0;BitCnt<8;BitCnt++)
        MOV     R7,#0x8
//  159       {       
//  160         SCL=0;      
??RcvByte_0:
        CLR     0x80.0
//  161         Delay_us(5); //Ê±ÖÓµÍµçÆ½ÖÜÆÚ´óÓÚ4.7us
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  162         if(SDA==1)retc=retc+1; //¶ÁÊý¾ÝÎ»,½ÓÊÕµÄÊý¾ÝÎ»·ÅÈëretcÖÐ
        MOV     C,0x80.1
        JNC     ??RcvByte_1
        INC     R6
//  163         SCL=1;
??RcvByte_1:
        SETB    0x80.0
//  164         retc=retc<<1;
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//  165         Delay_us(5);  
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  166       }   
        DEC     R7
        MOV     A,R7
        JNZ     ??RcvByte_0
//  167    SCL=0; 
        CLR     0x80.0
//  168   return(retc);
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock19
        REQUIRE P0DIR
        REQUIRE _A_P0
//  169 
//  170 }
//  171 
//  172 //*********************************************************
//  173 //Á¬Ðø¶Á³öBH1750ÄÚ²¿Êý¾Ý
//  174 //*********************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 uchar IRcvStrExt(uchar sla,uchar *s,uchar no)
IRcvStrExt:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function IRcvStrExt
        CODE
//  176 {   uchar i;	
        FUNCALL IRcvStrExt, Start_I2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRcvStrExt, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRcvStrExt, RcvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRcvStrExt, BH1750_SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRcvStrExt, RcvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRcvStrExt, BH1750_SendNCK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IRcvStrExt, Stop_I2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 1,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  177     Start_I2c();                         //ÆðÊ¼ÐÅºÅ
        ; Setup parameters for call to function Start_I2c
        LCALL   ??Start_I2c?relay
//  178     SendByte(sla+1);        //·¢ËÍÉè±¸µØÖ·+¶ÁÐÅºÅ
        ; Setup parameters for call to function SendByte
        MOV     A,#0x1
        ADD     A,?V0 + 1
        LCALL   ?Subroutine5 & 0xFFFF
//  179     if(ack==0)return(0);
??CrossCallReturnLabel_6:
        JNZ     ??IRcvStrExt_0
        MOV     R1,#0x0
        SJMP    ??IRcvStrExt_1
//  180       for (i=0; i<3; i++)                      //Á¬Ðø¶ÁÈ¡6¸öµØÖ·Êý¾Ý£¬´æ´¢ÖÐBUF
??IRcvStrExt_0:
        MOV     ?V0 + 0,#0x3
//  181       {
//  182         *s=RcvByte();      
??IRcvStrExt_2:
        ; Setup parameters for call to function RcvByte
        LCALL   ?Subroutine6 & 0xFFFF
//  183         BH1750_SendACK();                //»ØÓ¦ACK
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function BH1750_SendACK
        LCALL   ??BH1750_SendACK?relay
//  184         s++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  185       }		
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JNZ     ??IRcvStrExt_2
//  186         *s=RcvByte();
        ; Setup parameters for call to function RcvByte
        LCALL   ?Subroutine6 & 0xFFFF
//  187         BH1750_SendNCK();   //×îºóÒ»¸öÊý¾ÝÐèÒª»ØNOACK             
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function BH1750_SendNCK
        LCALL   ??BH1750_SendNCK?relay
//  188         Stop_I2c();   
        ; Setup parameters for call to function Stop_I2c
        LCALL   ??Stop_I2c?relay
//  189         return(1);
        MOV     R1,#0x1
??IRcvStrExt_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock20
//  190 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL   ??RcvByte?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     R1,A
        LCALL   ??SendByte?relay
        MOV     DPTR,#ack
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
//  191 
//  192 //³õÊ¼»¯BH1750£¬¸ù¾ÝÐèÒªÇë²Î¿¼pdf½øÐÐÐÞ¸Ä****

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  193 void Init_BH1750(void)
Init_BH1750:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function Init_BH1750
        CODE
//  194 {
        FUNCALL Init_BH1750, ISendByte
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  195     P0DIR|=0x03;//P00 P01
        ORL     0xfd,#0x3
//  196    ISendByte(0x46,0x01);  
        ; Setup parameters for call to function ISendByte
        MOV     R2,#0x1
        MOV     R1,#0x46
        LCALL   ??ISendByte?relay
//  197 }
        LJMP    ??Subroutine7_0 & 0xFFFF
        CFI EndBlock cfiBlock28
        REQUIRE P0DIR
//  198 //*********************************************************
//  199 //Ö÷³ÌÐò********
//  200 //*********************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  201 float get_light(void)
get_light:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function get_light
        CODE
//  202 {  
        FUNCALL get_light, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, Init_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, ISendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, ISendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, IRcvStrExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  203     uchar *p=buf;
//  204     	float light;	//¹âÕÕÖµ
//  205           int     dis_data;                       //±äÁ¿
//  206     Delay_ms(100);	    //ÑÓÊ±100ms	
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??Delay_ms?relay
//  207     Init_BH1750();       //³õÊ¼»¯BH1750
        ; Setup parameters for call to function Init_BH1750
        LCALL   ??Init_BH1750?relay
//  208     ISendByte(0x46,0x01);   // power on
        ; Setup parameters for call to function ISendByte
        MOV     R2,#0x1
        MOV     R1,#0x46
        LCALL   ??ISendByte?relay
//  209     ISendByte(0x46,0X10);   // H- resolution mode
        ; Setup parameters for call to function ISendByte
        MOV     R2,#0x10
        MOV     R1,#0x46
        LCALL   ??ISendByte?relay
//  210     Delay_ms(180);              //ÑÓÊ±180ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0x4c
        MOV     R3,#0x0
        LCALL   ??Delay_ms?relay
//  211     IRcvStrExt(0x46,p,2);       //Á¬Ðø¶Á³öÊý¾Ý£¬´æ´¢ÔÚBUFÖÐ
        ; Setup parameters for call to function IRcvStrExt
        MOV     R4,#0x2
        MOV     R2,#buf & 0xff
        MOV     R3,#(buf >> 8) & 0xff
        MOV     R1,#0x46
        LCALL   ??IRcvStrExt?relay
//  212      dis_data=buf[0];
//  213     dis_data=(dis_data<<8)+buf[1];//ºÏ³ÉÊý¾Ý£¬¼´¹âÕÕÊý¾Ý  
//  214     light=(float)dis_data/1.2;    
        MOV     DPTR,#buf
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        ADD     A,R2
        MOV     ?V0 + 0,A
        MOV     A,R1
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3f99999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
//  215     if(light>=10000)
        MOV     DPTR,#__Constant_461c4000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_GE
        JNC     ??get_light_0
//  216       light=9999;
        MOV     DPTR,#__Constant_461c3c00
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  217     return light;
??get_light_0:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock29
//  218    
//  219 } 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f99999a:
        DD 3F99999AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_461c4000:
        DD 461C4000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_461c3c00:
        DD 461C3C00H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_10us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_10us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Start_I2c?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Start_I2c

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Stop_I2c?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Stop_I2c

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BH1750_SendACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BH1750_SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BH1750_SendNCK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BH1750_SendNCK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ISendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ISendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RcvByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RcvByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IRcvStrExt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IRcvStrExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Init_BH1750?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Init_BH1750

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_light?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_light

        END
//  220 
// 
// 585 bytes in segment BANKED_CODE
//  78 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  12 bytes in segment XDATA_ROM_C
//   9 bytes in segment XDATA_Z
// 
// 663 bytes of CODE  memory
//   0 bytes of CONST memory (+ 12 bytes shared)
//   0 bytes of DATA  memory (+  2 bytes shared)
//   9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
