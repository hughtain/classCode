###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         18/Aug/2016  17:05:40 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zi #
#                          gbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp _IR\Source\enddevice2.c            #
#    Command line       =  -f "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7. #
#                          9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack #
#                          \Samples\GenericApp _IR\CC2530DB\..\..\..\Tools\CC #
#                          2530DB\f8wCoord.cfg" (-DCPU32MHZ                   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7. #
#                          9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack #
#                          \Samples\GenericApp _IR\CC2530DB\..\..\..\Tools\CC #
#                          2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1314                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥ #
#                          \700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                       #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\Source\enddevice2.c" -D ZTOOL_P1    #
#                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ #
#                          ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                      #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\CoordinatorEB\List\" -lA   #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\CoordinatorEB\List\" #
#                           --diag_suppress Pe001,Pa010 -o                    #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\CoordinatorEB\Obj\"  #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ #
#                          ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                      #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\" -I                       #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\Source\" -I       #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\ZMain\TI253 #
#                          0DB\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢ #
#                          Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\ #
#                          zstack\Samples\GenericApp                          #
#                          _IR\CC2530DB\..\..\..\..\..\Components\hal\include #
#                          \" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼ #
#                          þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Samples\GenericApp _IR\CC2530DB\..\..\..\..\.. #
#                          \Components\hal\target\CC2530EB\" -I               #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\include\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥ #
#                          \700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                       #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\high_level\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\70 #
#                          0ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                          #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\" -I                           #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\low_level\srf04\single_chip\" -I         #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mt\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBe #
#                          e¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\GenericApp                     #
#                          _IR\CC2530DB\..\..\..\..\..\Components\osal\includ #
#                          e\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì× #
#                          ¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zs #
#                          tack\Samples\GenericApp _IR\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\" -I                   #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\services\sdata\" -I                          #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\af\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\70 #
#                          0ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                          #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\nwk\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigB #
#                          ee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Samples\GenericApp                    #
#                          _IR\CC2530DB\..\..\..\..\..\Components\stack\sapi\ #
#                          " -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ #
#                          7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zsta #
#                          ck\Samples\GenericApp _IR\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sec\" -I                          #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sys\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\7 #
#                          00ZigBee¿ª·¢Ì×¼þ7.9\Zigbee                         #
#                          code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp _IR\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\zdo\" -I "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigB #
#                          ee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Samples\GenericApp                    #
#                          _IR\CC2530DB\..\..\..\..\..\Components\zmac\" -I   #
#                          "F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Z #
#                          igbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp _IR\CC2530DB\..\..\..\..\..\Compo #
#                          nents\zmac\f8w\" -Ohz --require_prototypes         #
#    List file          =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zi #
#                          gbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp _IR\CC2530DB\CoordinatorEB\List\en #
#                          ddevice2.lst                                       #
#    Object file        =  F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zi #
#                          gbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp _IR\CC2530DB\CoordinatorEB\Obj\end #
#                          device2.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\2016-2017Éè¼Æ\7ÔÂ·Ý¶©µ¥\700ZigBee¿ª·¢Ì×¼þ7.9\Zigbee code\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp _IR\Source\enddevice2.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          #if !defined( WIN32 )
     72            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     73          #endif
     74          
     75          /* HAL */
     76          #include "hal_lcd.h"
     77          #include "hal_led.h"
     78          #include "hal_key.h"
     79          #include "hal_uart.h"
     80          #include "BH1750.h"
     81          #define IR P0_7//ÈËÌåºìÍâ
     82          #define LED2 P1_1//ÈËÌåºìÍâ
     83          /* RTOS */
     84          #if defined( IAR_ARMCM3_LM )
     85          #include "RTOS_App.h"
     86          #endif  
     87          uint16 myApp_ReadlightLevel(void);
     88          /*********************************************************************
     89           * MACROS
     90           */
     91          
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */
    103          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    104          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
    105          {
    106            GENERICAPP_CLUSTERID
    107          };
    108          

   \                                 In  segment XDATA_ROM_C, align 1
    109          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW GenericApp_ClusterList
    110          {
    111            GENERICAPP_ENDPOINT,              //  int Endpoint;
    112            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    113            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    114            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    115            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    116            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    117            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    118            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    119            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    120          };
    121          
    122          // This is the Endpoint/Interface description.  It is defined here, but
    123          // filled-in in GenericApp_Init().  Another way to go would be to fill
    124          // in the structure here and make it a "const" (in code space).  The
    125          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    127          
    128          /*********************************************************************
    129           * EXTERNAL VARIABLES
    130           */
    131          
    132          /*********************************************************************
    133           * EXTERNAL FUNCTIONS
    134           */
    135          
    136          /*********************************************************************
    137           * LOCAL VARIABLES
    138           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140                                    // This variable will be received when
    141                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    149          byte sensorID = '1';
   \                     sensorID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for sensorID>`
   \   000001                REQUIRE __INIT_XDATA_I
    150          
    151          /*********************************************************************
    152           * LOCAL FUNCTIONS
    153           */
    154          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    155          static void GenericApp_HandleKeys( byte shift, byte keys );
    156          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    157          static void GenericApp_SendTheMessage( void );
    158          
    159          
    160          uint16 myApp_ReadLightLevel( void );
    161          
    162          #if defined( IAR_ARMCM3_LM )
    163          static void GenericApp_ProcessRtosMessage( void );
    164          #endif
    165          
    166          /*********************************************************************
    167           * NETWORK LAYER CALLBACKS
    168           */
    169          
    170          /*********************************************************************
    171           * PUBLIC FUNCTIONS
    172           */
    173          
    174          /*********************************************************************
    175           * @fn      GenericApp_Init
    176           *
    177           * @brief   Initialization function for the Generic App Task.
    178           *          This is called during initialization and should contain
    179           *          any application specific initialization (ie. hardware
    180           *          initialization/setup, table initialization, power up
    181           *          notificaiton ... ).
    182           *
    183           * @param   task_id - the ID assigned by OSAL.  This ID should be
    184           *                    used to send messages and set timers.
    185           *
    186           * @return  none
    187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    189          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    190            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    191            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    192            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    193            P0DIR &= ~(1<<7);  //P07ÉèÖÃÎªÊäÈë
   \   000015   53FD7F       ANL     0xfd,#0x7f
    194            HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
   \   000018                ; Setup parameters for call to function HalLedSet
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7902         MOV     R1,#0x2
   \   00001C   12....       LCALL   ??HalLedSet?relay
    195            HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A01         MOV     R2,#0x1
   \   000021   7901         MOV     R1,#0x1
   \   000023   12....       LCALL   ??HalLedSet?relay
    196            // Device hardware initialization can be added here or in main() (Zmain.c).
    197            // If the hardware is application specific - add it here.
    198            // If the hardware is other parts of the device add it in main().
    199          
    200            GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000026   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000029   7402         MOV     A,#0x2
   \   00002B   F0           MOVX    @DPTR,A
    201            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   00002C   A3           INC     DPTR
   \   00002D   740A         MOV     A,#0xa
   \   00002F   F0           MOVX    @DPTR,A
    202            GenericApp_DstAddr.addr.shortAddr = 0x0000;
   \   000030   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
    203          
    204            // Fill out the endpoint description.
    205            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000037   90....       MOV     DPTR,#GenericApp_epDesc
   \   00003A   740A         MOV     A,#0xa
   \   00003C   F0           MOVX    @DPTR,A
    206            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000044   F0           MOVX    @DPTR,A
    207            GenericApp_epDesc.simpleDesc
    208                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000045   A3           INC     DPTR
   \   000046   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00004C   F0           MOVX    @DPTR,A
    209            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    210          
    211            // Register the endpoint description with the AF
    212            afRegister( &GenericApp_epDesc );
   \   000050                ; Setup parameters for call to function afRegister
   \   000050   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000052   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000054   12....       LCALL   ??afRegister?relay
    213          
    214            // Register for all key events - This app will handle all key events
    215            RegisterForKeys( GenericApp_TaskID );
   \   000057                ; Setup parameters for call to function RegisterForKeys
   \   000057   90....       MOV     DPTR,#GenericApp_TaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   ??RegisterForKeys?relay
    216          
    217            // Update the display
    218          #if defined ( LCD_SUPPORTED )
    219            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00005F                ; Setup parameters for call to function HalLcdWriteString
   \   00005F   7901         MOV     R1,#0x1
   \   000061   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000063   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000065   12....       LCALL   ??HalLcdWriteString?relay
    220          #endif
    221          
    222            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000068                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000068   7A20         MOV     R2,#0x20
   \   00006A   7B80         MOV     R3,#-0x80
   \   00006C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    223            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000074                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000074   7A06         MOV     R2,#0x6
   \   000076   7B80         MOV     R3,#-0x80
   \   000078   90....       MOV     DPTR,#GenericApp_TaskID
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    224          
    225          #if defined( IAR_ARMCM3_LM )
    226            // Register this task with RTOS task initiator
    227            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    228          #endif
    229          }
   \   000080   7F01         MOV     R7,#0x1
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000085                REQUIRE P0DIR
    230          
    231          /*********************************************************************
    232           * @fn      GenericApp_ProcessEvent
    233           *
    234           * @brief   Generic Application Task event processor.  This function
    235           *          is called to process all events for the task.  Events
    236           *          include timers, messages and any other user defined events.
    237           *
    238           * @param   task_id  - The OSAL assigned task ID.
    239           * @param   events - events to process.  This is a bit map and can
    240           *                   contain more than one event.
    241           *
    242           * @return  none
    243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    245          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    246            afIncomingMSGPacket_t *MSGpkt;
    247            afDataConfirm_t *afDataConfirm;
    248          
    249            // Data Confirmation message fields
    250            byte sentEP;
    251            ZStatus_t sentStatus;
    252            byte sentTransID;       // This should match the value sent
    253            (void)task_id;  // Intentionally unreferenced parameter
    254          
    255            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    256            {
    257              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   802B         SJMP    ??GenericApp_ProcessEvent_1
    258              while ( MSGpkt )
    259              {
    260                switch ( MSGpkt->hdr.event )
    261                {
    262                  case ZDO_CB_MSG:
    263                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    264                    break;
    265          
    266                  case KEY_CHANGE:
    267                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    268                    break;
    269          
    270                  case AF_DATA_CONFIRM_CMD:
    271                    // This message is received as a confirmation of a data packet sent.
    272                    // The status is of ZStatus_t type [defined in ZComDef.h]
    273                    // The message fields are defined in AF.h
    274                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    275                    sentEP = afDataConfirm->endpoint;
    276                    sentStatus = afDataConfirm->hdr.status;
    277                    sentTransID = afDataConfirm->transID;
    278                    (void)sentEP;
    279                    (void)sentTransID;
    280          
    281                    // Action taken when confirmation is received.
    282                    if ( sentStatus != ZSuccess )
    283                    {
    284                      // The data wasn't delivered -- Do something
    285                    }
    286                    break;
    287          
    288                  case AF_INCOMING_MSG_CMD:
    289                    GenericApp_MessageMSGCB( MSGpkt );
    290                    break;
    291          
    292                  case ZDO_STATE_CHANGE:
    293                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001D   F0           MOVX    @DPTR,A
    294                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    295                        || (GenericApp_NwkState == DEV_ROUTER)
    296                        || (GenericApp_NwkState == DEV_END_DEVICE) )
   \   00001E   6409         XRL     A,#0x9
   \   000020   600A         JZ      ??GenericApp_ProcessEvent_3
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6407         XRL     A,#0x7
   \   000025   6005         JZ      ??GenericApp_ProcessEvent_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6406         XRL     A,#0x6
   \   00002A   7010         JNZ     ??GenericApp_ProcessEvent_4
    297                    {
    298                      // Start sending "the" message in a regular interval.
    299                      osal_start_timerEx( GenericApp_TaskID,
    300                                          GENERICAPP_SEND_MSG_EVT,
    301                                          GENERICAPP_SEND_MSG_TIMEOUT );
   \                     ??GenericApp_ProcessEvent_3:
   \   00002C                ; Setup parameters for call to function osal_start_timerEx
   \   00002C   7CF4         MOV     R4,#-0xc
   \   00002E   7D01         MOV     R5,#0x1
   \   000030   7A01         MOV     R2,#0x1
   \   000032   7B00         MOV     R3,#0x0
   \   000034   90....       MOV     DPTR,#GenericApp_TaskID
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   12....       LCALL   ??osal_start_timerEx?relay
    302                    }
    303                    break;
    304          
    305                  default:
    306                    break;
    307                }
    308          
    309                // Release the memory
    310                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   00003C                ; Setup parameters for call to function osal_msg_deallocate
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??osal_msg_deallocate?relay
    311          
    312                // Next
    313                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000043                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000043   90....       MOV     DPTR,#GenericApp_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??osal_msg_receive?relay
   \   00004B   8A..         MOV     ?V0 + 2,R2
   \   00004D   8B..         MOV     ?V0 + 3,R3
   \   00004F   AE..         MOV     R6,?V0 + 2
   \   000051   AF..         MOV     R7,?V0 + 3
   \   000053   EE           MOV     A,R6
   \   000054   4F           ORL     A,R7
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   24E6         ADD     A,#-0x1a
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000066   245A         ADD     A,#0x5a
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??GenericApp_ProcessEvent_7 & 0xFFFF
   \   00006D   24EF         ADD     A,#-0x11
   \   00006F   60A7         JZ      ??GenericApp_ProcessEvent_2
   \   000071   24FE         ADD     A,#-0x2
   \   000073   70C7         JNZ     ??GenericApp_ProcessEvent_4
   \   000075   EE           MOV     A,R6
   \   000076   240C         ADD     A,#0xc
   \   000078   F582         MOV     DPL,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V0 + 2,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F5..         MOV     ?V0 + 3,A
   \   000086   78..         MOV     R0,#?V0 + 2
   \   000088   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   00008B   0000         DW        0
   \   00008D   0200         DW        2
   \   00008F   0680         DW        32774
   \   000091   ....         DW        ??GenericApp_ProcessEvent_8
   \   000093   2080         DW        32800
   \   000095   ....         DW        ??GenericApp_ProcessEvent_9
   \   000097   ....         DW        ??GenericApp_ProcessEvent_4
   \                     ??GenericApp_ProcessEvent_8:
   \   000099                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   0000A0   8A..         MOV     ?V0 + 2,R2
   \   0000A2   8B..         MOV     ?V0 + 3,R3
   \   0000A4   EA           MOV     A,R2
   \   0000A5   45..         ORL     A,?V0 + 3
   \   0000A7   6093         JZ      ??GenericApp_ProcessEvent_4
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   7032         JNZ     ??GenericApp_ProcessEvent_10
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   602C         JZ      ??GenericApp_ProcessEvent_10
   \   0000B6   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   8A82         MOV     DPL,R2
   \   0000BE   8B83         MOV     DPH,R3
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F8           MOV     R0,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F9           MOV     R1,A
   \   0000C6   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000C9   E8           MOV     A,R0
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E9           MOV     A,R1
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   8A82         MOV     DPL,R2
   \   0000D0   8B83         MOV     DPH,R3
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB                ; Setup parameters for call to function HalLedSet
   \   0000DB   7A01         MOV     R2,#0x1
   \   0000DD   7908         MOV     R1,#0x8
   \   0000DF   12....       LCALL   ??HalLedSet?relay
   \                     ??GenericApp_ProcessEvent_10:
   \   0000E2                ; Setup parameters for call to function osal_mem_free
   \   0000E2   AA..         MOV     R2,?V0 + 2
   \   0000E4   AB..         MOV     R3,?V0 + 3
   \   0000E6   12....       LCALL   ??osal_mem_free?relay
   \   0000E9   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000EC   EE           MOV     A,R6
   \   0000ED   2413         ADD     A,#0x13
   \   0000EF   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F2   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   0000F4                ; Setup parameters for call to function HalLedSet
   \   0000F4   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   0000F6   7908         MOV     R1,#0x8
   \                     ??GenericApp_ProcessEvent_13:
   \   0000F8   12....       LCALL   ??HalLedSet?relay
   \   0000FB   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   0000FE                ; Setup parameters for call to function HalLedSet
   \   0000FE   7A04         MOV     R2,#0x4
   \   000100   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_7:
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F5..         MOV     ?V0 + 4,A
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   6003         JZ      $+5
   \   000111   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000114   E5..         MOV     A,?V0 + 4
   \   000116   A2E1         MOV     C,0xE0 /* A   */.1
   \   000118   506A         JNC     ??GenericApp_ProcessEvent_14
   \   00011A                ; Setup parameters for call to function HalLedSet
   \   00011A   7A00         MOV     R2,#0x0
   \   00011C   7908         MOV     R1,#0x8
   \   00011E   12....       LCALL   ??HalLedSet?relay
   \   000121   7408         MOV     A,#0x8
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   7402         MOV     A,#0x2
   \   000128   F0           MOVX    @DPTR,A
   \   000129   85..82       MOV     DPL,?XSP + 0
   \   00012C   85..83       MOV     DPH,?XSP + 1
   \   00012F   E4           CLR     A
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   F0           MOVX    @DPTR,A
   \   000133                ; Setup parameters for call to function NLME_GetShortAddr
   \   000133   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000136   8A..         MOV     ?V0 + 2,R2
   \   000138   8B..         MOV     ?V0 + 3,R3
   \   00013A   AC..         MOV     R4,?V0 + 2
   \   00013C   AD..         MOV     R5,?V0 + 3
   \   00013E   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   000141   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   000144                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000144   75..00       MOV     ?V0 + 5,#0x0
   \   000147   78..         MOV     R0,#?V0 + 5
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014C   78..         MOV     R0,#?V0 + 2
   \   00014E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000151   75..04       MOV     ?V0 + 5,#0x4
   \   000154   78..         MOV     R0,#?V0 + 5
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000159   78..         MOV     R0,#?V0 + 2
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   75..04       MOV     ?V0 + 2,#0x4
   \   000161   78..         MOV     R0,#?V0 + 2
   \   000163   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000166   75..0F       MOV     ?V0 + 3,#0xf
   \   000169   78..         MOV     R0,#?V0 + 2
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   90....       MOV     DPTR,#GenericApp_epDesc
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   7409         MOV     A,#0x9
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   AA82         MOV     R2,DPL
   \   00017A   AB83         MOV     R3,DPH
   \   00017C   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00017F   7409         MOV     A,#0x9
   \   000181   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GenericApp_ProcessEvent_14:
   \   000184   E5..         MOV     A,?V0 + 4
   \   000186   A2E3         MOV     C,0xE0 /* A   */.3
   \   000188   4003         JC      $+5
   \   00018A   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   00018D                ; Setup parameters for call to function HalLedSet
   \   00018D   7A00         MOV     R2,#0x0
   \   00018F   7908         MOV     R1,#0x8
   \   000191   12....       LCALL   ??HalLedSet?relay
   \   000194   7408         MOV     A,#0x8
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   740F         MOV     A,#0xf
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   85..82       MOV     DPL,?XSP + 0
   \   00019F   85..83       MOV     DPH,?XSP + 1
   \   0001A2   74FF         MOV     A,#-0x1
   \   0001A4   F0           MOVX    @DPTR,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   0001AA   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001AD                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0001AD   75..00       MOV     ?V0 + 4,#0x0
   \   0001B0   78..         MOV     R0,#?V0 + 4
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B5   78..         MOV     R0,#?V0 + 2
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   75..04       MOV     ?V0 + 4,#0x4
   \   0001BD   78..         MOV     R0,#?V0 + 4
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C2   78..         MOV     R0,#?V0 + 2
   \   0001C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C7   75..04       MOV     ?V0 + 2,#0x4
   \   0001CA   75..0F       MOV     ?V0 + 3,#0xf
   \   0001CD   78..         MOV     R0,#?V0 + 2
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   7904         MOV     R1,#0x4
   \   0001D4   7CFF         MOV     R4,#-0x1
   \   0001D6   7DFF         MOV     R5,#-0x1
   \   0001D8   7408         MOV     A,#0x8
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   AA82         MOV     R2,DPL
   \   0001DF   AB83         MOV     R3,DPH
   \   0001E1   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001E4   7408         MOV     A,#0x8
   \   0001E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E9   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   6401         XRL     A,#0x1
   \   0001F3   7002         JNZ     ??GenericApp_ProcessEvent_15
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \                     ??GenericApp_ProcessEvent_15:
   \   0001F7   6003         JZ      $+5
   \   0001F9   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   0001FC   EE           MOV     A,R6
   \   0001FD   2422         ADD     A,#0x22
   \   0001FF   12....       LCALL   ?Subroutine0 & 0xFFFF
    314              }
   \                     ??CrossCallReturnLabel_1:
   \   000202   6462         XRL     A,#0x62
   \   000204   6003         JZ      $+5
   \   000206   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000209   EE           MOV     A,R6
   \   00020A   2422         ADD     A,#0x22
   \   00020C   F582         MOV     DPL,A
   \   00020E   EF           MOV     A,R7
   \   00020F   3400         ADDC    A,#0x0
   \   000211   F583         MOV     DPH,A
   \   000213   A3           INC     DPTR
   \   000214   E0           MOVX    A,@DPTR
   \   000215   F583         MOV     DPH,A
   \   000217   8882         MOV     DPL,R0
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   6431         XRL     A,#0x31
   \   00021D   7007         JNZ     ??GenericApp_ProcessEvent_16
   \   00021F                ; Setup parameters for call to function HalLedSet
   \   00021F   7A00         MOV     R2,#0x0
   \                     ??GenericApp_ProcessEvent_17:
   \   000221   7902         MOV     R1,#0x2
   \   000223   02....       LJMP    ??GenericApp_ProcessEvent_13 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_16:
   \   000226                ; Setup parameters for call to function HalLedSet
   \   000226   7A01         MOV     R2,#0x1
   \   000228   80F7         SJMP    ??GenericApp_ProcessEvent_17
    315          
    316              // return unprocessed events
    317              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_5:
   \   00022A   AA..         MOV     R2,?V0 + 0
   \   00022C   E5..         MOV     A,?V0 + 1
   \   00022E   6480         XRL     A,#0x80
   \   000230   FB           MOV     R3,A
   \   000231   8025         SJMP    ??GenericApp_ProcessEvent_18
    318            }
    319          
    320            // Send a message out - This event is generated by a timer
    321            //  (setup in GenericApp_Init()).
    322            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   000233   EA           MOV     A,R2
   \   000234   A2E0         MOV     C,0xE0 /* A   */.0
   \   000236   501C         JNC     ??GenericApp_ProcessEvent_19
    323            {
    324              // Send "the" message
    325             GenericApp_SendTheMessage();
   \   000238                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000238   12....       LCALL   ??GenericApp_SendTheMessage?relay
    326              // Setup to send message again
    327              osal_start_timerEx( GenericApp_TaskID,
    328                                  GENERICAPP_SEND_MSG_EVT,
    329                                  GENERICAPP_SEND_MSG_TIMEOUT );
   \   00023B                ; Setup parameters for call to function osal_start_timerEx
   \   00023B   7CF4         MOV     R4,#-0xc
   \   00023D   7D01         MOV     R5,#0x1
   \   00023F   7A01         MOV     R2,#0x1
   \   000241   7B00         MOV     R3,#0x0
   \   000243   90....       MOV     DPTR,#GenericApp_TaskID
   \   000246   E0           MOVX    A,@DPTR
   \   000247   F9           MOV     R1,A
   \   000248   12....       LCALL   ??osal_start_timerEx?relay
    330          
    331              // return unprocessed events
    332              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   00024B   E5..         MOV     A,?V0 + 0
   \   00024D   6401         XRL     A,#0x1
   \   00024F   FA           MOV     R2,A
   \   000250   AB..         MOV     R3,?V0 + 1
   \   000252   8004         SJMP    ??GenericApp_ProcessEvent_18
    333            }
    334          
    335            
    336          #if defined( IAR_ARMCM3_LM )
    337            // Receive a message from the RTOS queue
    338            if ( events & GENERICAPP_RTOS_MSG_EVT )
    339            {
    340              // Process message from RTOS queue
    341              GenericApp_ProcessRtosMessage();
    342          
    343              // return unprocessed events
    344              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    345            }
    346          #endif
    347          
    348            // Discard unknown events
    349            return 0;
   \                     ??GenericApp_ProcessEvent_19:
   \   000254   7A00         MOV     R2,#0x0
   \   000256   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_18:
   \   000258   7409         MOV     A,#0x9
   \   00025A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025D   7F06         MOV     R7,#0x6
   \   00025F   02....       LJMP    ?BANKED_LEAVE_XDATA
    350          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F583         MOV     DPH,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
    351          
    352          /*********************************************************************
    353           * Event Generation Functions
    354           */
    355          
    356          /*********************************************************************
    357           * @fn      GenericApp_ProcessZDOMsgs()
    358           *
    359           * @brief   Process response messages
    360           *
    361           * @param   none
    362           *
    363           * @return  none
    364           */
    365          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    366          {
    367            switch ( inMsg->clusterID )
    368            {
    369              case End_Device_Bind_rsp://ÇëÇóÊÇ·¢¸øÎÒÃÇµÄ Coordinator
    370                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )//ÕÇóÈë¾W³É¹¦
    371                {
    372                  // Light LED
    373                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );//½M¾WôªÔ±»ücÁÁ
    374                }
    375          #if defined( BLINK_LEDS )
    376                else
    377                {
    378                  // Flash LED to show failure
    379                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );//½M¾WÊ§¡£¬µÈÌì¶éW q îB
    380                }
    381          #endif
    382                break;
    383          
    384              case Match_Desc_rsp:
    385                {
    386                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    387                  if ( pRsp )
    388                  {
    389                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    390                    {
    391                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    392                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    393                      // Take the first endpoint, Can be changed to search through endpoints
    394                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    395          
    396                      // Light LED
    397                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    398                    }
    399                    osal_mem_free( pRsp );
    400                  }
    401                }
    402                break;
    403            }
    404          }
    405          
    406          /*********************************************************************
    407           * @fn      GenericApp_HandleKeys
    408           *
    409           * @brief   Handles all key events for this device.
    410           *
    411           * @param   shift - true if in shift/alt.
    412           * @param   keys - bit field for key events. Valid entries:
    413           *                 HAL_KEY_SW_4
    414           *                 HAL_KEY_SW_3
    415           *                 HAL_KEY_SW_2
    416           *                 HAL_KEY_SW_1
    417           *
    418           * @return  none
    419           */
    420          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    421          {
    422            zAddrType_t dstAddr;
    423          
    424            // Shift is used to make each button/switch dual purpose.
    425            if ( shift )
    426            {
    427              if ( keys & HAL_KEY_SW_1 )
    428              {
    429              }
    430              if ( keys & HAL_KEY_SW_2 )
    431              {
    432              }
    433              if ( keys & HAL_KEY_SW_3 )
    434              {
    435              }
    436              if ( keys & HAL_KEY_SW_4 )
    437              {
    438              }
    439            }
    440            else
    441            {
    442              if ( keys & HAL_KEY_SW_1 )
    443              {
    444                // Since SW1 isn't used for anything else in this application...
    445          #if defined( SWITCH1_BIND )
    446                // we can use SW1 to simulate SW2 for devices that only have one switch,
    447                keys |= HAL_KEY_SW_2;
    448          #elif defined( SWITCH1_MATCH )
    449                // or use SW1 to simulate SW4 for devices that only have one switch
    450                keys |= HAL_KEY_SW_4;
    451          #endif
    452              }
    453          
    454              if ( keys & HAL_KEY_SW_2 )
    455              {
    456                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    457          
    458                // Initiate an End Device Bind Request for the mandatory endpoint
    459                dstAddr.addrMode = Addr16Bit;
    460                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    461                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    462                                      GenericApp_epDesc.endPoint,
    463                                      GENERICAPP_PROFID,
    464                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    465                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    466                                      FALSE );
    467              }
    468          
    469              if ( keys & HAL_KEY_SW_3 )
    470              {
    471              }
    472          
    473              if ( keys & HAL_KEY_SW_4 )
    474              {
    475                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    476                // Initiate a Match Description Request (Service Discovery)
    477                dstAddr.addrMode = AddrBroadcast;
    478                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    479                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    480                                  GENERICAPP_PROFID,
    481                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    482                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    483                                  FALSE );
    484              }
    485            }
    486          }
    487          
    488          /*********************************************************************
    489           * LOCAL FUNCTIONS
    490           */
    491          
    492          /*********************************************************************
    493           * @fn      GenericApp_MessageMSGCB
    494           *
    495           * @brief   Data message processor callback.  This function processes
    496           *          any incoming data - probably from other devices.  So, based
    497           *          on cluster ID, perform the intended action.
    498           *
    499           * @param   none
    500           *
    501           * @return  none
    502           */
    503          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    504          {
    505          
    506            switch ( pkt->clusterId )
    507            {
    508              case GENERICAPP_CLUSTERID:
    509                if(pkt->cmd.Data[0]=='b')//2ºÅ½Úµã
    510                {
    511                   if(pkt->cmd.Data[1]=='1')//¿ªµÆ
    512                     HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
    513                   else
    514                     HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
    515                }
    516          
    517                break;
    518            }
    519          
    520          }
    521          
    522          /*********************************************************************
    523           * @fn      GenericApp_Send_wenshidu_Message
    524           *
    525           * @brief   point to point.
    526           *
    527           * @param   none
    528           *
    529           * @return  none
    530           */
    531          
    532          
    533          
    534          /*********************************************************************
    535           * @fn      GenericApp_SendTheMessage
    536           *
    537           * @brief   Send "the" message.
    538           *
    539           * @param   none
    540           *
    541           * @return  none
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    544          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    545           unsigned char theMessageData[10];
    546            int data;//¹âÕÕÖµ;
    547            data= (int)get_light();//¹âÕÕÖµ»ñÈ¡
   \   00000A                ; Setup parameters for call to function get_light
   \   00000A   12....       LCALL   ??get_light?relay
   \   00000D   12....       LCALL   ?R2345_FLT_TO_L
   \   000010   AC..         MOV     R4,?V0 + 0
   \   000012   AD..         MOV     R5,?V0 + 1
    548            theMessageData[0]='L';
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   744C         MOV     A,#0x4c
   \   00001C   F0           MOVX    @DPTR,A
    549             theMessageData[1]=data/1000%10+0x30;
   \   00001D   EC           MOV     A,R4
   \   00001E   F8           MOV     R0,A
   \   00001F   ED           MOV     A,R5
   \   000020   F9           MOV     R1,A
   \   000021   7AE8         MOV     R2,#-0x18
   \   000023   7B03         MOV     R3,#0x3
   \   000025   12....       LCALL   ?S_DIV_MOD
   \   000028   7A0A         MOV     R2,#0xa
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ?S_DIV_MOD
   \   00002F   EA           MOV     A,R2
   \   000030   2430         ADD     A,#0x30
   \   000032   C0E0         PUSH    A
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
    550            theMessageData[2]=data/100%10+0x30;
   \   00003C   EC           MOV     A,R4
   \   00003D   F8           MOV     R0,A
   \   00003E   ED           MOV     A,R5
   \   00003F   F9           MOV     R1,A
   \   000040   7A64         MOV     R2,#0x64
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   ?S_DIV_MOD
   \   000047   7A0A         MOV     R2,#0xa
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   12....       LCALL   ?S_DIV_MOD
   \   00004E   EA           MOV     A,R2
   \   00004F   2430         ADD     A,#0x30
   \   000051   C0E0         PUSH    A
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine1 & 0xFFFF
    551             theMessageData[3]=data/10%10+0x30;
   \                     ??CrossCallReturnLabel_2:
   \   00005D   12....       LCALL   ?S_DIV_MOD
   \   000060   7A0A         MOV     R2,#0xa
   \   000062   7B00         MOV     R3,#0x0
   \   000064   12....       LCALL   ?S_DIV_MOD
   \   000067   EA           MOV     A,R2
   \   000068   2430         ADD     A,#0x30
   \   00006A   C0E0         PUSH    A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   D0E0         POP     A
   \   000073   12....       LCALL   ?Subroutine1 & 0xFFFF
    552            theMessageData[4]=data%10+0x30;
   \                     ??CrossCallReturnLabel_3:
   \   000076   12....       LCALL   ?S_DIV_MOD
   \   000079   EA           MOV     A,R2
   \   00007A   2430         ADD     A,#0x30
   \   00007C   C0E0         PUSH    A
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
    553            if(IR)//ÓÐÈË
   \   000086   A287         MOV     C,0x80.7
   \   000088   7405         MOV     A,#0x5
   \   00008A   5007         JNC     ??GenericApp_SendTheMessage_0
    554            theMessageData[5]='1' ;
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   7431         MOV     A,#0x31
   \   000091   8005         SJMP    ??GenericApp_SendTheMessage_1
    555             else//Ã»ÈË
    556            theMessageData[5]='0' ;
   \                     ??GenericApp_SendTheMessage_0:
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   7430         MOV     A,#0x30
   \                     ??GenericApp_SendTheMessage_1:
   \   000098   F0           MOVX    @DPTR,A
    557            if(LED2)//LED¹ØµÆ
   \   000099   A291         MOV     C,0x90.1
   \   00009B   7406         MOV     A,#0x6
   \   00009D   5007         JNC     ??GenericApp_SendTheMessage_2
    558             theMessageData[6]='0' ; 
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   7430         MOV     A,#0x30
   \   0000A4   8005         SJMP    ??GenericApp_SendTheMessage_3
    559            else//LED¿ªµÆ
    560             theMessageData[6]='1' ;   
   \                     ??GenericApp_SendTheMessage_2:
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   7431         MOV     A,#0x31
   \                     ??GenericApp_SendTheMessage_3:
   \   0000AB   F0           MOVX    @DPTR,A
    561              theMessageData[7]=0;//½áÊø·û
   \   0000AC   7407         MOV     A,#0x7
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E4           CLR     A
   \   0000B2   F0           MOVX    @DPTR,A
    562            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    563                                 GENERICAPP_TWO,
    564                                 (byte)osal_strlen( theMessageData ) ,
                                                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    565                                 (byte *)&theMessageData,
    566                                 &GenericApp_TransID,
    567                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000B3                ; Setup parameters for call to function AF_DataRequest
   \   0000B3   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   0000BE   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   0000C1   78..         MOV     R0,#?V0 + 0
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7403         MOV     A,#0x3
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   8582..       MOV     ?V0 + 0,DPL
   \   0000CE   8583..       MOV     ?V0 + 1,DPH
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6                ; Setup parameters for call to function osal_strlen
   \   0000D6   7405         MOV     A,#0x5
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF   12....       LCALL   ??osal_strlen?relay
   \   0000E2   8A..         MOV     ?V0 + 0,R2
   \   0000E4   75..00       MOV     ?V0 + 1,#0x0
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   75..03       MOV     ?V0 + 0,#0x3
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   7920         MOV     R1,#0x20
   \   0000F6   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   0000F8   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   0000FA   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   0000FC   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   0000FE   12....       LCALL   ??AF_DataRequest?relay
   \   000101   7409         MOV     A,#0x9
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
    568            {
    569              // Successfully requested to be sent.
    570            }
    571            else
    572            {
    573              // Error occurred in request to send.
    574            }
    575          }
   \   000106   740A         MOV     A,#0xa
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010B   7F04         MOV     R7,#0x4
   \   00010D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000110                REQUIRE _A_P0
   \   000110                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   7A0A         MOV     R2,#0xa
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sensorID>`:
   \   000000   31           DB 49

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  
    576          
    577          #if defined( IAR_ARMCM3_LM )
    578          /*********************************************************************
    579           * @fn      GenericApp_ProcessRtosMessage
    580           *
    581           * @brief   Receive message from RTOS queue, send response back.
    582           *
    583           * @param   none
    584           *
    585           * @return  none
    586           */
    587          static void GenericApp_ProcessRtosMessage( void )
    588          {
    589            osalQueue_t inMsg;
    590          
    591            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    592            {
    593              uint8 cmndId = inMsg.cmnd;
    594              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    595          
    596              switch ( cmndId )
    597              {
    598                case CMD_INCR:
    599                  counter += 1;  /* Increment the incoming counter */
    600                                 /* Intentionally fall through next case */
    601          
    602                case CMD_ECHO:
    603                {
    604                  userQueue_t outMsg;
    605          
    606                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    607                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    608                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    609                  break;
    610                }
    611                
    612                default:
    613                  break;  /* Ignore unknown command */    
    614              }
    615            }
    616          }
    617          #endif
    618          
    619          /*********************************************************************
    620           */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    0      0      9
       -> HalLedSet                     0      0     18
       -> HalLedSet                     0      0     18
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
       -> HalLcdWriteString             0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
     GenericApp_ProcessEvent            0      0     32
       -> osal_msg_receive              0      0     46
       -> osal_start_timerEx            0      0     46
       -> osal_msg_deallocate           0      0     46
       -> osal_msg_receive              0      0     46
       -> ZDO_ParseEPListRsp            0      0     46
       -> HalLedSet                     0      0     46
       -> osal_mem_free                 0      0     46
       -> HalLedSet                     0      0     46
       -> HalLedSet                     0      0     46
       -> HalLedSet                     0      0     46
       -> NLME_GetShortAddr             0      0     46
       -> ZDP_EndDeviceBindReq          0      0     64
       -> HalLedSet                     0      0     46
       -> ZDP_MatchDescReq              0      0     62
       -> HalLedSet                     0      0     46
       -> HalLedSet                     0      0     46
       -> GenericApp_SendTheMessage     0      0     46
       -> osal_start_timerEx            0      0     46
     GenericApp_SendTheMessage          1      0     54
       -> get_light                     0      0     44
       -> osal_strlen                   0      0     54
       -> AF_DataRequest                0      0     62


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _A_P0                                1
     _A_P1                                1
     P0DIR                                1
     GenericApp_ClusterList               8
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_NwkState                  1
     GenericApp_TransID                   1
     GenericApp_DstAddr                  12
     sensorID                             1
     GenericApp_Init                    133
     GenericApp_ProcessEvent            610
     ?Subroutine0                        17
     GenericApp_SendTheMessage          272
     ?Subroutine1                        10
     ?<Initializer for sensorID>          1
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ?<Constant "GenericApp">            11

 
 1 042 bytes in segment BANKED_CODE
    18 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    31 bytes in segment XDATA_ROM_C
    21 bytes in segment XDATA_Z
 
 1 061 bytes of CODE  memory
    31 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)
    22 bytes of XDATA memory

Errors: none
Warnings: 1
